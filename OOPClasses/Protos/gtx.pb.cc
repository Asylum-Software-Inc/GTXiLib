// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtx.proto

#include "gtx.pb.h"

#include <algorithm>

#include "net/proto2/io/public/coded_stream.h"
#include "net/proto2/public/extension_set.h"
#include "net/proto2/public/wire_format_lite.h"
#include "net/proto2/public/descriptor.h"
#include "net/proto2/public/generated_message_reflection.h"
#include "net/proto2/public/reflection_ops.h"
#include "net/proto2/public/wire_format.h"
#include "net/proto2/public/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)
#include "net/proto2/public/port_def.inc"

PROTOBUF_PRAGMA_INIT_SEG
namespace gtxilib {
namespace oopclasses {
namespace protos {
constexpr Point::Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct PointDefaultTypeInternal {
  constexpr PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointDefaultTypeInternal _Point_default_instance_;
constexpr Size::Size(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0)
  , height_(0){}
struct SizeDefaultTypeInternal {
  constexpr SizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SizeDefaultTypeInternal() {}
  union {
    Size _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SizeDefaultTypeInternal _Size_default_instance_;
constexpr Rect::Rect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , size_(nullptr){}
struct RectDefaultTypeInternal {
  constexpr RectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RectDefaultTypeInternal() {}
  union {
    Rect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RectDefaultTypeInternal _Rect_default_instance_;
constexpr ElementType::ElementType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ElementTypeDefaultTypeInternal {
  constexpr ElementTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ElementTypeDefaultTypeInternal() {}
  union {
    ElementType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ElementTypeDefaultTypeInternal _ElementType_default_instance_;
constexpr UIElement::UIElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ax_label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ax_frame_(nullptr)
  , ax_traits_(uint64_t{0u})
  , is_ax_element_(false)
  , ax_element_type_(0)
{}
struct UIElementDefaultTypeInternal {
  constexpr UIElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UIElementDefaultTypeInternal() {}
  union {
    UIElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UIElementDefaultTypeInternal _UIElement_default_instance_;
}  // namespace protos
}  // namespace oopclasses
}  // namespace gtxilib
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mq4kUTL9cO7[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mq4kUTL9cO7[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mq4kUTL9cO7 = nullptr;

const ::uint32 TableStruct_mq4kUTL9cO7::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Point, x_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Point, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Size, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Size, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Size, width_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Size, height_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Rect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Rect, origin_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Rect, size_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::ElementType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, is_ax_element_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, ax_traits_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, ax_label_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, ax_frame_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, ax_element_type_),
  3,
  2,
  0,
  1,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::gtxilib::oopclasses::protos::Point)},
  { 10, 18, -1, sizeof(::gtxilib::oopclasses::protos::Size)},
  { 20, 28, -1, sizeof(::gtxilib::oopclasses::protos::Rect)},
  { 30, -1, -1, sizeof(::gtxilib::oopclasses::protos::ElementType)},
  { 36, 47, -1, sizeof(::gtxilib::oopclasses::protos::UIElement)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gtxilib::oopclasses::protos::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gtxilib::oopclasses::protos::_Size_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gtxilib::oopclasses::protos::_Rect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gtxilib::oopclasses::protos::_ElementType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gtxilib::oopclasses::protos::_UIElement_default_instance_),
};

const char descriptor_table_protodef_mq4kUTL9cO7[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tgtx.proto\022\031gtxilib.oopclasses.protos\"3"
  "\n\005Point\022\016\n\001x\030\001 \001(\002H\000\210\001\001\022\016\n\001y\030\002 \001(\002H\001\210\001\001B"
  "\004\n\002_xB\004\n\002_y\"D\n\004Size\022\022\n\005width\030\001 \001(\002H\000\210\001\001\022"
  "\023\n\006height\030\002 \001(\002H\001\210\001\001B\010\n\006_widthB\t\n\007_heigh"
  "t\"\205\001\n\004Rect\0225\n\006origin\030\001 \001(\0132 .gtxilib.oop"
  "classes.protos.PointH\000\210\001\001\0222\n\004size\030\002 \001(\0132"
  "\037.gtxilib.oopclasses.protos.SizeH\001\210\001\001B\t\n"
  "\007_originB\007\n\005_size\"\233\n\n\013ElementType\"\213\n\n\017El"
  "ementTypeEnum\022\007\n\003ANY\020\000\022\t\n\005OTHER\020\001\022\017\n\013APP"
  "LICATION\020\002\022\t\n\005GROUP\020\003\022\n\n\006WINDOW\020\004\022\t\n\005SHE"
  "ET\020\005\022\n\n\006DRAWER\020\006\022\t\n\005ALERT\020\007\022\n\n\006DIALOG\020\010\022"
  "\n\n\006BUTTON\020\t\022\020\n\014RADIO_BUTTON\020\n\022\017\n\013RADIO_G"
  "ROUP\020\013\022\r\n\tCHECK_BOX\020\014\022\027\n\023DISCLOSURE_TRIA"
  "NGLE\020\r\022\021\n\rPOP_UP_BUTTON\020\016\022\r\n\tCOMBO_BOX\020\017"
  "\022\017\n\013MENU_BUTTON\020\020\022\022\n\016TOOLBAR_BUTTON\020\021\022\013\n"
  "\007POPOVER\020\022\022\014\n\010KEYBOARD\020\023\022\007\n\003KEY\020\024\022\022\n\016NAV"
  "IGATION_BAR\020\025\022\013\n\007TAB_BAR\020\026\022\r\n\tTAB_GROUP\020"
  "\027\022\013\n\007TOOLBAR\020\030\022\016\n\nSTATUS_BAR\020\031\022\t\n\005TABLE\020"
  "\032\022\r\n\tTABLE_ROW\020\033\022\020\n\014TABLE_COLUMN\020\034\022\013\n\007OU"
  "TLINE\020\035\022\017\n\013OUTLINE_ROW\020\036\022\013\n\007BROWSER\020\037\022\023\n"
  "\017COLLECTION_VIEW\020 \022\n\n\006SLIDER\020!\022\022\n\016PAGE_I"
  "NDICATOR\020\"\022\026\n\022PROGRESS_INDICATOR\020#\022\026\n\022AC"
  "TIVITY_INDICATOR\020$\022\025\n\021SEGMENTED_CONTROL\020"
  "%\022\n\n\006PICKER\020&\022\020\n\014PICKER_WHEEL\020\'\022\n\n\006SWITC"
  "H\020(\022\n\n\006TOGGLE\020)\022\010\n\004LINK\020*\022\t\n\005IMAGE\020+\022\010\n\004"
  "ICON\020,\022\020\n\014SEARCH_FIELD\020-\022\017\n\013SCROLL_VIEW\020"
  ".\022\016\n\nSCROLL_BAR\020/\022\017\n\013STATIC_TEXT\0200\022\016\n\nTE"
  "XT_FIELD\0201\022\025\n\021SECURE_TEXT_FIELD\0202\022\017\n\013DAT"
  "E_PICKER\0203\022\r\n\tTEXT_VIEW\0204\022\010\n\004MENU\0205\022\r\n\tM"
  "ENU_ITEM\0206\022\014\n\010MENU_BAR\0207\022\021\n\rMENU_BAR_ITE"
  "M\0208\022\007\n\003MAP\0209\022\014\n\010WEB_VIEW\020:\022\023\n\017INCREMENT_"
  "ARROW\020;\022\023\n\017DECREMENT_ARROW\020<\022\014\n\010TIMELINE"
  "\020=\022\024\n\020RATING_INDICATOR\020>\022\023\n\017VALUE_INDICA"
  "TOR\020\?\022\017\n\013SPLIT_GROUP\020@\022\014\n\010SPLITTER\020A\022\027\n\023"
  "RELEVANCE_INDICATOR\020B\022\016\n\nCOLOR_WELL\020C\022\014\n"
  "\010HELP_TAG\020D\022\t\n\005MATTE\020E\022\r\n\tDOCK_ITEM\020F\022\t\n"
  "\005RULER\020G\022\020\n\014RULER_MARKER\020H\022\010\n\004GRID\020I\022\023\n\017"
  "LEVEL_INDICATOR\020J\022\010\n\004CELL\020K\022\017\n\013LAYOUT_AR"
  "EA\020L\022\017\n\013LAYOUT_ITEM\020M\022\n\n\006HANDLE\020N\022\013\n\007STE"
  "PPER\020O\022\007\n\003TAB\020P\022\r\n\tTOUCH_BAR\020Q\022\017\n\013STATUS"
  "_ITEM\020R\"\262\002\n\tUIElement\022\032\n\ris_ax_element\030\001"
  " \001(\010H\000\210\001\001\022\026\n\tax_traits\030\002 \001(\004H\001\210\001\001\022\025\n\010ax_"
  "label\030\003 \001(\tH\002\210\001\001\0226\n\010ax_frame\030\004 \001(\0132\037.gtx"
  "ilib.oopclasses.protos.RectH\003\210\001\001\022T\n\017ax_e"
  "lement_type\030\005 \001(\01626.gtxilib.oopclasses.p"
  "rotos.ElementType.ElementTypeEnumH\004\210\001\001B\020"
  "\n\016_is_ax_elementB\014\n\n_ax_traitsB\013\n\t_ax_la"
  "belB\013\n\t_ax_frameB\022\n\020_ax_element_typeb\006pr"
  "oto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mq4kUTL9cO7_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mq4kUTL9cO7 = {
  false, false, 1924, descriptor_table_protodef_mq4kUTL9cO7, "gtx.proto", 
  &descriptor_table_mq4kUTL9cO7_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_mq4kUTL9cO7::offsets,
  file_level_metadata_mq4kUTL9cO7, file_level_enum_descriptors_mq4kUTL9cO7, file_level_service_descriptors_mq4kUTL9cO7,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mq4kUTL9cO7_getter() {
  return &descriptor_table_mq4kUTL9cO7;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mq4kUTL9cO7(&descriptor_table_mq4kUTL9cO7);
namespace gtxilib {
namespace oopclasses {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElementType_ElementTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mq4kUTL9cO7);
  return file_level_enum_descriptors_mq4kUTL9cO7[0];
}
bool ElementType_ElementTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ElementType_ElementTypeEnum ElementType::ANY;
constexpr ElementType_ElementTypeEnum ElementType::OTHER;
constexpr ElementType_ElementTypeEnum ElementType::APPLICATION;
constexpr ElementType_ElementTypeEnum ElementType::GROUP;
constexpr ElementType_ElementTypeEnum ElementType::WINDOW;
constexpr ElementType_ElementTypeEnum ElementType::SHEET;
constexpr ElementType_ElementTypeEnum ElementType::DRAWER;
constexpr ElementType_ElementTypeEnum ElementType::ALERT;
constexpr ElementType_ElementTypeEnum ElementType::DIALOG;
constexpr ElementType_ElementTypeEnum ElementType::BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::RADIO_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::RADIO_GROUP;
constexpr ElementType_ElementTypeEnum ElementType::CHECK_BOX;
constexpr ElementType_ElementTypeEnum ElementType::DISCLOSURE_TRIANGLE;
constexpr ElementType_ElementTypeEnum ElementType::POP_UP_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::COMBO_BOX;
constexpr ElementType_ElementTypeEnum ElementType::MENU_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::TOOLBAR_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::POPOVER;
constexpr ElementType_ElementTypeEnum ElementType::KEYBOARD;
constexpr ElementType_ElementTypeEnum ElementType::KEY;
constexpr ElementType_ElementTypeEnum ElementType::NAVIGATION_BAR;
constexpr ElementType_ElementTypeEnum ElementType::TAB_BAR;
constexpr ElementType_ElementTypeEnum ElementType::TAB_GROUP;
constexpr ElementType_ElementTypeEnum ElementType::TOOLBAR;
constexpr ElementType_ElementTypeEnum ElementType::STATUS_BAR;
constexpr ElementType_ElementTypeEnum ElementType::TABLE;
constexpr ElementType_ElementTypeEnum ElementType::TABLE_ROW;
constexpr ElementType_ElementTypeEnum ElementType::TABLE_COLUMN;
constexpr ElementType_ElementTypeEnum ElementType::OUTLINE;
constexpr ElementType_ElementTypeEnum ElementType::OUTLINE_ROW;
constexpr ElementType_ElementTypeEnum ElementType::BROWSER;
constexpr ElementType_ElementTypeEnum ElementType::COLLECTION_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::SLIDER;
constexpr ElementType_ElementTypeEnum ElementType::PAGE_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::PROGRESS_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::ACTIVITY_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::SEGMENTED_CONTROL;
constexpr ElementType_ElementTypeEnum ElementType::PICKER;
constexpr ElementType_ElementTypeEnum ElementType::PICKER_WHEEL;
constexpr ElementType_ElementTypeEnum ElementType::SWITCH;
constexpr ElementType_ElementTypeEnum ElementType::TOGGLE;
constexpr ElementType_ElementTypeEnum ElementType::LINK;
constexpr ElementType_ElementTypeEnum ElementType::IMAGE;
constexpr ElementType_ElementTypeEnum ElementType::ICON;
constexpr ElementType_ElementTypeEnum ElementType::SEARCH_FIELD;
constexpr ElementType_ElementTypeEnum ElementType::SCROLL_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::SCROLL_BAR;
constexpr ElementType_ElementTypeEnum ElementType::STATIC_TEXT;
constexpr ElementType_ElementTypeEnum ElementType::TEXT_FIELD;
constexpr ElementType_ElementTypeEnum ElementType::SECURE_TEXT_FIELD;
constexpr ElementType_ElementTypeEnum ElementType::DATE_PICKER;
constexpr ElementType_ElementTypeEnum ElementType::TEXT_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::MENU;
constexpr ElementType_ElementTypeEnum ElementType::MENU_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::MENU_BAR;
constexpr ElementType_ElementTypeEnum ElementType::MENU_BAR_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::MAP;
constexpr ElementType_ElementTypeEnum ElementType::WEB_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::INCREMENT_ARROW;
constexpr ElementType_ElementTypeEnum ElementType::DECREMENT_ARROW;
constexpr ElementType_ElementTypeEnum ElementType::TIMELINE;
constexpr ElementType_ElementTypeEnum ElementType::RATING_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::VALUE_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::SPLIT_GROUP;
constexpr ElementType_ElementTypeEnum ElementType::SPLITTER;
constexpr ElementType_ElementTypeEnum ElementType::RELEVANCE_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::COLOR_WELL;
constexpr ElementType_ElementTypeEnum ElementType::HELP_TAG;
constexpr ElementType_ElementTypeEnum ElementType::MATTE;
constexpr ElementType_ElementTypeEnum ElementType::DOCK_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::RULER;
constexpr ElementType_ElementTypeEnum ElementType::RULER_MARKER;
constexpr ElementType_ElementTypeEnum ElementType::GRID;
constexpr ElementType_ElementTypeEnum ElementType::LEVEL_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::CELL;
constexpr ElementType_ElementTypeEnum ElementType::LAYOUT_AREA;
constexpr ElementType_ElementTypeEnum ElementType::LAYOUT_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::HANDLE;
constexpr ElementType_ElementTypeEnum ElementType::STEPPER;
constexpr ElementType_ElementTypeEnum ElementType::TAB;
constexpr ElementType_ElementTypeEnum ElementType::TOUCH_BAR;
constexpr ElementType_ElementTypeEnum ElementType::STATUS_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::ElementTypeEnum_MIN;
constexpr ElementType_ElementTypeEnum ElementType::ElementTypeEnum_MAX;
constexpr int ElementType::ElementTypeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gtxilib.oopclasses.protos.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:gtxilib.oopclasses.protos.Point)
}

inline void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:gtxilib.oopclasses.protos.Point)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point::SharedDtor() {
  DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:gtxilib.oopclasses.protos.Point)
  ::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

#ifdef PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

const char* Point::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  ptr = ::PROTOBUF_NAMESPACE_ID::internal::TcParser<2>::ParseLoop(
      this, ptr, ctx, &_table_.header);
  return ptr;
}

#if PROTOBUF_TC_STATIC_PARSE_SINGULAR1
const char* Point::Tct_ParseS1(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint8_t>() != 0))
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  ptr += 1;
  hasbits |= (uint64_t{1} << data.hasbit_idx());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::gtxilib::oopclasses::protos::Point*>(msg, data.offset());
  if (field == nullptr)
    field = CreateMaybeMessage<::gtxilib::oopclasses::protos::Point>(ctx->data().arena);
  return ctx->ParseMessage(field, ptr);
}
#endif  // PROTOBUF_TC_STATIC_PARSE_SINGULAR1
#if PROTOBUF_TC_STATIC_PARSE_SINGULAR2
const char* Point::Tct_ParseS2(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint16_t>() != 0))
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  ptr += 2;
  hasbits |= (uint64_t{1} << data.hasbit_idx());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::gtxilib::oopclasses::protos::Point*>(msg, data.offset());
  if (field == nullptr)
    field = CreateMaybeMessage<::gtxilib::oopclasses::protos::Point>(ctx->data().arena);
  return ctx->ParseMessage(field, ptr);
}
#endif  // PROTOBUF_TC_STATIC_PARSE_SINGULAR2
#if PROTOBUF_TC_STATIC_PARSE_REPEATED1
const char* Point::Tct_ParseR1(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint8_t>() != 0)) {
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  }
  ptr += 1;
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<Point>>(msg, data.offset());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  ptr = ctx->ParseMessage(field.Add(), ptr);
  return ptr;
}
#endif  // PROTOBUF_TC_STATIC_PARSE_REPEATED1
#if PROTOBUF_TC_STATIC_PARSE_REPEATED2
const char* Point::Tct_ParseR2(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint16_t>() != 0)) {
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  }
  ptr += 2;
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<Point>>(msg, data.offset());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  ptr = ctx->ParseMessage(field.Add(), ptr);
  return ptr;
}
#endif  // PROTOBUF_TC_STATIC_PARSE_REPEATED2

#else  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

#endif  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

#ifdef PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED
const ::PROTOBUF_NAMESPACE_ID::internal::TailCallParseTable<2>
    Point::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Point, _has_bits_),
    0, 0, 0,  // no _extensions_
    &_Point_default_instance_._instance,
    ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::GenericFallback  // fallback
  }, {
    {::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::GenericFallback, {}},
    // optional float x = 1;
    {::PROTOBUF_NAMESPACE_ID::internal::TcParser<2>::SingularFixed<uint32_t, uint8_t>, {13, 0, static_cast<uint16_t>(PROTOBUF_FIELD_OFFSET(Point, x_))}},
    // optional float y = 2;
    {::PROTOBUF_NAMESPACE_ID::internal::TcParser<2>::SingularFixed<uint32_t, uint8_t>, {21, 1, static_cast<uint16_t>(PROTOBUF_FIELD_OFFSET(Point, y_))}},
    {::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::GenericFallback, {}},
  },
};

#endif  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED
::uint8* Point::_InternalSerialize(
    ::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtxilib.oopclasses.protos.Point)
#ifdef NDEBUG
  ::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float x = 1;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
#else  // NDEBUG
  for (int i = 1; i >= 0; i-- ) {
    switch(i) {
      case 0: {
        // optional float x = 1;
        if (_internal_has_x()) {
          target = stream->EnsureSpace(target);
          target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
        }

        break;
      }
      case 1: {
        // optional float y = 2;
        if (_internal_has_y()) {
          target = stream->EnsureSpace(target);
          target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
        }

        break;
      }
      default: {
        DCHECK(false) << "Unexpected index: " << i;
      }
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
#endif  // !NDEBUG
  // @@protoc_insertion_point(serialize_to_array_end:gtxilib.oopclasses.protos.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gtxilib.oopclasses.protos.Point)
  size_t total_size = 0;

  ::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtxilib.oopclasses.protos.Point)
  DCHECK_NE(&from, this);
  ::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtxilib.oopclasses.protos.Point)
  if (&from == this) return;
  #ifndef NDEBUG
  size_t from_size = from.ByteSizeLong();
  #endif
  Clear();
  #ifndef NDEBUG
  CHECK_EQ(from_size, from.ByteSizeLong())
    << "Source of CopyFrom changed when clearing target.  Either "
       "source is a nested message in target (not allowed), or "
       "another thread is modifying the source.";
  #endif
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mq4kUTL9cO7_getter, &descriptor_table_mq4kUTL9cO7_once,
      file_level_metadata_mq4kUTL9cO7[0]);
}

// ===================================================================

class Size::_Internal {
 public:
  using HasBits = decltype(std::declval<Size>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Size::Size(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gtxilib.oopclasses.protos.Size)
}
Size::Size(const Size& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:gtxilib.oopclasses.protos.Size)
}

inline void Size::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Size::~Size() {
  // @@protoc_insertion_point(destructor:gtxilib.oopclasses.protos.Size)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Size::SharedDtor() {
  DCHECK(GetArenaForAllocation() == nullptr);
}

void Size::ArenaDtor(void* object) {
  Size* _this = reinterpret_cast< Size* >(object);
  (void)_this;
}
void Size::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:gtxilib.oopclasses.protos.Size)
  ::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

#ifdef PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

const char* Size::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  ptr = ::PROTOBUF_NAMESPACE_ID::internal::TcParser<2>::ParseLoop(
      this, ptr, ctx, &_table_.header);
  return ptr;
}

#if PROTOBUF_TC_STATIC_PARSE_SINGULAR1
const char* Size::Tct_ParseS1(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint8_t>() != 0))
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  ptr += 1;
  hasbits |= (uint64_t{1} << data.hasbit_idx());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::gtxilib::oopclasses::protos::Size*>(msg, data.offset());
  if (field == nullptr)
    field = CreateMaybeMessage<::gtxilib::oopclasses::protos::Size>(ctx->data().arena);
  return ctx->ParseMessage(field, ptr);
}
#endif  // PROTOBUF_TC_STATIC_PARSE_SINGULAR1
#if PROTOBUF_TC_STATIC_PARSE_SINGULAR2
const char* Size::Tct_ParseS2(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint16_t>() != 0))
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  ptr += 2;
  hasbits |= (uint64_t{1} << data.hasbit_idx());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::gtxilib::oopclasses::protos::Size*>(msg, data.offset());
  if (field == nullptr)
    field = CreateMaybeMessage<::gtxilib::oopclasses::protos::Size>(ctx->data().arena);
  return ctx->ParseMessage(field, ptr);
}
#endif  // PROTOBUF_TC_STATIC_PARSE_SINGULAR2
#if PROTOBUF_TC_STATIC_PARSE_REPEATED1
const char* Size::Tct_ParseR1(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint8_t>() != 0)) {
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  }
  ptr += 1;
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<Size>>(msg, data.offset());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  ptr = ctx->ParseMessage(field.Add(), ptr);
  return ptr;
}
#endif  // PROTOBUF_TC_STATIC_PARSE_REPEATED1
#if PROTOBUF_TC_STATIC_PARSE_REPEATED2
const char* Size::Tct_ParseR2(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint16_t>() != 0)) {
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  }
  ptr += 2;
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<Size>>(msg, data.offset());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  ptr = ctx->ParseMessage(field.Add(), ptr);
  return ptr;
}
#endif  // PROTOBUF_TC_STATIC_PARSE_REPEATED2

#else  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

const char* Size::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 13)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 21)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

#endif  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

#ifdef PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED
const ::PROTOBUF_NAMESPACE_ID::internal::TailCallParseTable<2>
    Size::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Size, _has_bits_),
    0, 0, 0,  // no _extensions_
    &_Size_default_instance_._instance,
    ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::GenericFallback  // fallback
  }, {
    {::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::GenericFallback, {}},
    // optional float width = 1;
    {::PROTOBUF_NAMESPACE_ID::internal::TcParser<2>::SingularFixed<uint32_t, uint8_t>, {13, 0, static_cast<uint16_t>(PROTOBUF_FIELD_OFFSET(Size, width_))}},
    // optional float height = 2;
    {::PROTOBUF_NAMESPACE_ID::internal::TcParser<2>::SingularFixed<uint32_t, uint8_t>, {21, 1, static_cast<uint16_t>(PROTOBUF_FIELD_OFFSET(Size, height_))}},
    {::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::GenericFallback, {}},
  },
};

#endif  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED
::uint8* Size::_InternalSerialize(
    ::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtxilib.oopclasses.protos.Size)
  ::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float width = 1;
  if (_internal_has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_width(), target);
  }

  // optional float height = 2;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gtxilib.oopclasses.protos.Size)
  return target;
}

size_t Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gtxilib.oopclasses.protos.Size)
  size_t total_size = 0;

  ::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Size::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Size::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Size::GetClassData() const { return &_class_data_; }

void Size::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Size *>(to)->MergeFrom(
      static_cast<const Size &>(from));
}


void Size::MergeFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtxilib.oopclasses.protos.Size)
  DCHECK_NE(&from, this);
  ::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtxilib.oopclasses.protos.Size)
  if (&from == this) return;
  #ifndef NDEBUG
  size_t from_size = from.ByteSizeLong();
  #endif
  Clear();
  #ifndef NDEBUG
  CHECK_EQ(from_size, from.ByteSizeLong())
    << "Source of CopyFrom changed when clearing target.  Either "
       "source is a nested message in target (not allowed), or "
       "another thread is modifying the source.";
  #endif
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  return true;
}

void Size::InternalSwap(Size* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Size, height_)
      + sizeof(Size::height_)
      - PROTOBUF_FIELD_OFFSET(Size, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Size::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mq4kUTL9cO7_getter, &descriptor_table_mq4kUTL9cO7_once,
      file_level_metadata_mq4kUTL9cO7[1]);
}

// ===================================================================

class Rect::_Internal {
 public:
  using HasBits = decltype(std::declval<Rect>()._has_bits_);
  static const ::gtxilib::oopclasses::protos::Point& origin(const Rect* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gtxilib::oopclasses::protos::Size& size(const Rect* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::gtxilib::oopclasses::protos::Point&
Rect::_Internal::origin(const Rect* msg) {
  return *msg->origin_;
}
const ::gtxilib::oopclasses::protos::Size&
Rect::_Internal::size(const Rect* msg) {
  return *msg->size_;
}
Rect::Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gtxilib.oopclasses.protos.Rect)
}
Rect::Rect(const Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::gtxilib::oopclasses::protos::Point(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::gtxilib::oopclasses::protos::Size(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gtxilib.oopclasses.protos.Rect)
}

inline void Rect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(size_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:gtxilib.oopclasses.protos.Rect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Rect::SharedDtor() {
  DCHECK(GetArenaForAllocation() == nullptr);
  delete origin_;
  delete size_;
}

void Rect::ArenaDtor(void* object) {
  Rect* _this = reinterpret_cast< Rect* >(object);
  (void)_this;
}
void Rect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:gtxilib.oopclasses.protos.Rect)
  ::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

#ifdef PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

const char* Rect::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  ptr = ::PROTOBUF_NAMESPACE_ID::internal::TcParser<2>::ParseLoop(
      this, ptr, ctx, &_table_.header);
  return ptr;
}

#if PROTOBUF_TC_STATIC_PARSE_SINGULAR1
const char* Rect::Tct_ParseS1(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint8_t>() != 0))
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  ptr += 1;
  hasbits |= (uint64_t{1} << data.hasbit_idx());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::gtxilib::oopclasses::protos::Rect*>(msg, data.offset());
  if (field == nullptr)
    field = CreateMaybeMessage<::gtxilib::oopclasses::protos::Rect>(ctx->data().arena);
  return ctx->ParseMessage(field, ptr);
}
#endif  // PROTOBUF_TC_STATIC_PARSE_SINGULAR1
#if PROTOBUF_TC_STATIC_PARSE_SINGULAR2
const char* Rect::Tct_ParseS2(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint16_t>() != 0))
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  ptr += 2;
  hasbits |= (uint64_t{1} << data.hasbit_idx());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::gtxilib::oopclasses::protos::Rect*>(msg, data.offset());
  if (field == nullptr)
    field = CreateMaybeMessage<::gtxilib::oopclasses::protos::Rect>(ctx->data().arena);
  return ctx->ParseMessage(field, ptr);
}
#endif  // PROTOBUF_TC_STATIC_PARSE_SINGULAR2
#if PROTOBUF_TC_STATIC_PARSE_REPEATED1
const char* Rect::Tct_ParseR1(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint8_t>() != 0)) {
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  }
  ptr += 1;
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<Rect>>(msg, data.offset());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  ptr = ctx->ParseMessage(field.Add(), ptr);
  return ptr;
}
#endif  // PROTOBUF_TC_STATIC_PARSE_REPEATED1
#if PROTOBUF_TC_STATIC_PARSE_REPEATED2
const char* Rect::Tct_ParseR2(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint16_t>() != 0)) {
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  }
  ptr += 2;
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<Rect>>(msg, data.offset());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  ptr = ctx->ParseMessage(field.Add(), ptr);
  return ptr;
}
#endif  // PROTOBUF_TC_STATIC_PARSE_REPEATED2

#else  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

const char* Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .gtxilib.oopclasses.protos.Point origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .gtxilib.oopclasses.protos.Size size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

#endif  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

#ifdef PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED
const ::PROTOBUF_NAMESPACE_ID::internal::TailCallParseTable<2>
    Rect::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Rect, _has_bits_),
    0, 0, 0,  // no _extensions_
    &_Rect_default_instance_._instance,
    ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::GenericFallback  // fallback
  }, {
    {::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::GenericFallback, {}},
    // optional .gtxilib.oopclasses.protos.Point origin = 1;
    {PROTOBUF_TC_PARSE_SINGULAR1(::gtxilib::oopclasses::protos::Point), {10, 0, static_cast<uint16_t>(PROTOBUF_FIELD_OFFSET(Rect, origin_))}},
    // optional .gtxilib.oopclasses.protos.Size size = 2;
    {PROTOBUF_TC_PARSE_SINGULAR1(::gtxilib::oopclasses::protos::Size), {18, 1, static_cast<uint16_t>(PROTOBUF_FIELD_OFFSET(Rect, size_))}},
    {::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::GenericFallback, {}},
  },
};

#endif  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED
::uint8* Rect::_InternalSerialize(
    ::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtxilib.oopclasses.protos.Rect)
#ifdef NDEBUG
  ::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .gtxilib.oopclasses.protos.Point origin = 1;
  if (_internal_has_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // optional .gtxilib.oopclasses.protos.Size size = 2;
  if (_internal_has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
#else  // NDEBUG
  for (int i = 1; i >= 0; i-- ) {
    switch(i) {
      case 0: {
        // optional .gtxilib.oopclasses.protos.Point origin = 1;
        if (_internal_has_origin()) {
          target = stream->EnsureSpace(target);
          target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(
              1, _Internal::origin(this), target, stream);
        }

        break;
      }
      case 1: {
        // optional .gtxilib.oopclasses.protos.Size size = 2;
        if (_internal_has_size()) {
          target = stream->EnsureSpace(target);
          target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(
              2, _Internal::size(this), target, stream);
        }

        break;
      }
      default: {
        DCHECK(false) << "Unexpected index: " << i;
      }
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
#endif  // !NDEBUG
  // @@protoc_insertion_point(serialize_to_array_end:gtxilib.oopclasses.protos.Rect)
  return target;
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gtxilib.oopclasses.protos.Rect)
  size_t total_size = 0;

  ::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .gtxilib.oopclasses.protos.Point origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional .gtxilib.oopclasses.protos.Size size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *size_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rect::GetClassData() const { return &_class_data_; }

void Rect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rect *>(to)->MergeFrom(
      static_cast<const Rect &>(from));
}


void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtxilib.oopclasses.protos.Rect)
  DCHECK_NE(&from, this);
  ::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::gtxilib::oopclasses::protos::Point::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_size()->::gtxilib::oopclasses::protos::Size::MergeFrom(from._internal_size());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtxilib.oopclasses.protos.Rect)
  if (&from == this) return;
  #ifndef NDEBUG
  size_t from_size = from.ByteSizeLong();
  #endif
  Clear();
  #ifndef NDEBUG
  CHECK_EQ(from_size, from.ByteSizeLong())
    << "Source of CopyFrom changed when clearing target.  Either "
       "source is a nested message in target (not allowed), or "
       "another thread is modifying the source.";
  #endif
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::InternalSwap(Rect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect, size_)
      + sizeof(Rect::size_)
      - PROTOBUF_FIELD_OFFSET(Rect, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mq4kUTL9cO7_getter, &descriptor_table_mq4kUTL9cO7_once,
      file_level_metadata_mq4kUTL9cO7[2]);
}

// ===================================================================

class ElementType::_Internal {
 public:
};

ElementType::ElementType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:gtxilib.oopclasses.protos.ElementType)
}
ElementType::ElementType(const ElementType& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gtxilib.oopclasses.protos.ElementType)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ElementType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ElementType::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ElementType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mq4kUTL9cO7_getter, &descriptor_table_mq4kUTL9cO7_once,
      file_level_metadata_mq4kUTL9cO7[3]);
}

// ===================================================================

class UIElement::_Internal {
 public:
  using HasBits = decltype(std::declval<UIElement>()._has_bits_);
  static void set_has_is_ax_element(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ax_traits(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ax_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gtxilib::oopclasses::protos::Rect& ax_frame(const UIElement* msg);
  static void set_has_ax_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ax_element_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::gtxilib::oopclasses::protos::Rect&
UIElement::_Internal::ax_frame(const UIElement* msg) {
  return *msg->ax_frame_;
}
UIElement::UIElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gtxilib.oopclasses.protos.UIElement)
}
UIElement::UIElement(const UIElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ax_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ax_label()) {
    ax_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ax_label(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ax_frame()) {
    ax_frame_ = new ::gtxilib::oopclasses::protos::Rect(*from.ax_frame_);
  } else {
    ax_frame_ = nullptr;
  }
  ::memcpy(&ax_traits_, &from.ax_traits_,
    static_cast<size_t>(reinterpret_cast<char*>(&ax_element_type_) -
    reinterpret_cast<char*>(&ax_traits_)) + sizeof(ax_element_type_));
  // @@protoc_insertion_point(copy_constructor:gtxilib.oopclasses.protos.UIElement)
}

inline void UIElement::SharedCtor() {
ax_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ax_frame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ax_element_type_) -
    reinterpret_cast<char*>(&ax_frame_)) + sizeof(ax_element_type_));
}

UIElement::~UIElement() {
  // @@protoc_insertion_point(destructor:gtxilib.oopclasses.protos.UIElement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UIElement::SharedDtor() {
  DCHECK(GetArenaForAllocation() == nullptr);
  ax_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delete ax_frame_;
}

void UIElement::ArenaDtor(void* object) {
  UIElement* _this = reinterpret_cast< UIElement* >(object);
  (void)_this;
}
void UIElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UIElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UIElement::Clear() {
// @@protoc_insertion_point(message_clear_start:gtxilib.oopclasses.protos.UIElement)
  ::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ax_label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      DCHECK(ax_frame_ != nullptr);
      ax_frame_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&ax_traits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ax_element_type_) -
        reinterpret_cast<char*>(&ax_traits_)) + sizeof(ax_element_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

#ifdef PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

const char* UIElement::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  ptr = ::PROTOBUF_NAMESPACE_ID::internal::TcParser<3>::ParseLoop(
      this, ptr, ctx, &_table_.header);
  return ptr;
}

const char* UIElement::Tct_ParseFallback(PROTOBUF_TC_PARAM_DECL) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) return nullptr
  auto* typed_msg = static_cast<UIElement*>(msg);
  typed_msg->_has_bits_[0] = hasbits;
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = typed_msg->GetArenaForAllocation(); (void)arena;
  ::uint32 tag;
  ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
  switch (tag >> 3) {
    // optional string ax_label = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 26)) {
        _Internal::set_has_ax_label(&typed_msg->_has_bits_);
        if (arena != nullptr) {
          ptr = ctx->ReadArenaString(ptr, &typed_msg->ax_label_, arena);
        } else {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(typed_msg->ax_label_.MutableNoArenaNoDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited()), ptr, ctx);
        }
        const std::string* str = &typed_msg->ax_label_.Get(); (void)str;
        CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gtxilib.oopclasses.protos.UIElement.ax_label"));
        CHK_(ptr);
      } else
        goto handle_unusual;
      goto next_tag;
    // optional .gtxilib.oopclasses.protos.ElementType.ElementTypeEnum ax_element_type = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 40)) {
        ::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
        typed_msg->_internal_set_ax_element_type(static_cast<::gtxilib::oopclasses::protos::ElementType_ElementTypeEnum>(val));
      } else
        goto handle_unusual;
      goto next_tag;
    default:
      goto handle_unusual;
  }  // switch
handle_unusual:
  if ((tag == 0) || ((tag & 7) == 4)) {
    CHK_(ptr);
    ctx->SetLastTag(tag);
    goto message_done;
  }
  ptr = UnknownFieldParse(
      tag,
      typed_msg->_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
      ptr, ctx);
  CHK_(ptr != nullptr);
next_tag:
message_done:
  return ptr;
#undef CHK_
}
#if PROTOBUF_TC_STATIC_PARSE_SINGULAR1
const char* UIElement::Tct_ParseS1(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint8_t>() != 0))
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  ptr += 1;
  hasbits |= (uint64_t{1} << data.hasbit_idx());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::gtxilib::oopclasses::protos::UIElement*>(msg, data.offset());
  if (field == nullptr)
    field = CreateMaybeMessage<::gtxilib::oopclasses::protos::UIElement>(ctx->data().arena);
  return ctx->ParseMessage(field, ptr);
}
#endif  // PROTOBUF_TC_STATIC_PARSE_SINGULAR1
#if PROTOBUF_TC_STATIC_PARSE_SINGULAR2
const char* UIElement::Tct_ParseS2(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint16_t>() != 0))
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  ptr += 2;
  hasbits |= (uint64_t{1} << data.hasbit_idx());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::gtxilib::oopclasses::protos::UIElement*>(msg, data.offset());
  if (field == nullptr)
    field = CreateMaybeMessage<::gtxilib::oopclasses::protos::UIElement>(ctx->data().arena);
  return ctx->ParseMessage(field, ptr);
}
#endif  // PROTOBUF_TC_STATIC_PARSE_SINGULAR2
#if PROTOBUF_TC_STATIC_PARSE_REPEATED1
const char* UIElement::Tct_ParseR1(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint8_t>() != 0)) {
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  }
  ptr += 1;
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<UIElement>>(msg, data.offset());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  ptr = ctx->ParseMessage(field.Add(), ptr);
  return ptr;
}
#endif  // PROTOBUF_TC_STATIC_PARSE_REPEATED1
#if PROTOBUF_TC_STATIC_PARSE_REPEATED2
const char* UIElement::Tct_ParseR2(PROTOBUF_TC_PARAM_DECL) {
  if (PROTOBUF_PREDICT_FALSE(data.coded_tag<uint16_t>() != 0)) {
    PROTOBUF_MUSTTAIL return table->fallback(PROTOBUF_TC_PARAM_PASS);
  }
  ptr += 2;
  auto& field = ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::RefAt<::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<UIElement>>(msg, data.offset());
  ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::SyncHasbits(msg, hasbits, table);
  ptr = ctx->ParseMessage(field.Add(), ptr);
  return ptr;
}
#endif  // PROTOBUF_TC_STATIC_PARSE_REPEATED2

#else  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

const char* UIElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_ax_element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 8)) {
          _Internal::set_has_is_ax_element(&has_bits);
          is_ax_element_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ax_traits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 16)) {
          _Internal::set_has_ax_traits(&has_bits);
          ax_traits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ax_label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 26)) {
          _Internal::set_has_ax_label(&has_bits);
          if (arena != nullptr) {
            ptr = ctx->ReadArenaString(ptr, &ax_label_, arena);
          } else {
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(ax_label_.MutableNoArenaNoDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited()), ptr, ctx);
          }
          const std::string* str = &ax_label_.Get(); (void)str;
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gtxilib.oopclasses.protos.UIElement.ax_label"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .gtxilib.oopclasses.protos.Rect ax_frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ax_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .gtxilib.oopclasses.protos.ElementType.ElementTypeEnum ax_element_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8>(tag) == 40)) {
          ::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ax_element_type(static_cast<::gtxilib::oopclasses::protos::ElementType_ElementTypeEnum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

#endif  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED

#ifdef PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED
const ::PROTOBUF_NAMESPACE_ID::internal::TailCallParseTable<3>
    UIElement::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UIElement, _has_bits_),
    0, 0, 0,  // no _extensions_
    &_UIElement_default_instance_._instance,
    UIElement::Tct_ParseFallback  // fallback
  }, {
    {UIElement::Tct_ParseFallback, {}},
    // optional bool is_ax_element = 1;
    {::PROTOBUF_NAMESPACE_ID::internal::TcParser<3>::SingularVarint<bool, uint8_t, ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::kNoConversion>, {8, 3, static_cast<uint16_t>(PROTOBUF_FIELD_OFFSET(UIElement, is_ax_element_))}},
    // optional uint64 ax_traits = 2;
    {::PROTOBUF_NAMESPACE_ID::internal::TcParser<3>::SingularVarint<uint64_t, uint8_t, ::PROTOBUF_NAMESPACE_ID::internal::TcParserBase::kNoConversion>, {16, 2, static_cast<uint16_t>(PROTOBUF_FIELD_OFFSET(UIElement, ax_traits_))}},
    {UIElement::Tct_ParseFallback, {}},
    // optional .gtxilib.oopclasses.protos.Rect ax_frame = 4;
    {PROTOBUF_TC_PARSE_SINGULAR1(::gtxilib::oopclasses::protos::Rect), {34, 1, static_cast<uint16_t>(PROTOBUF_FIELD_OFFSET(UIElement, ax_frame_))}},
    {UIElement::Tct_ParseFallback, {}},
    {UIElement::Tct_ParseFallback, {}},
    {UIElement::Tct_ParseFallback, {}},
  },
};

#endif  // PROTOBUF_TAIL_CALL_TABLE_PARSER_ENABLED
::uint8* UIElement::_InternalSerialize(
    ::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtxilib.oopclasses.protos.UIElement)
  ::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool is_ax_element = 1;
  if (_internal_has_is_ax_element()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_ax_element(), target);
  }

  // optional uint64 ax_traits = 2;
  if (_internal_has_ax_traits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ax_traits(), target);
  }

  // optional string ax_label = 3;
  if (_internal_has_ax_label()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ax_label().data(), static_cast<int>(this->_internal_ax_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gtxilib.oopclasses.protos.UIElement.ax_label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ax_label(), target);
  }

  // optional .gtxilib.oopclasses.protos.Rect ax_frame = 4;
  if (_internal_has_ax_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ax_frame(this), target, stream);
  }

  // optional .gtxilib.oopclasses.protos.ElementType.ElementTypeEnum ax_element_type = 5;
  if (_internal_has_ax_element_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_ax_element_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gtxilib.oopclasses.protos.UIElement)
  return target;
}

size_t UIElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gtxilib.oopclasses.protos.UIElement)
  size_t total_size = 0;

  ::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string ax_label = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ax_label());
    }

    // optional .gtxilib.oopclasses.protos.Rect ax_frame = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ax_frame_);
    }

    // optional uint64 ax_traits = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_ax_traits());
    }

    // optional bool is_ax_element = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .gtxilib.oopclasses.protos.ElementType.ElementTypeEnum ax_element_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ax_element_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UIElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIElement::GetClassData() const { return &_class_data_; }

void UIElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UIElement *>(to)->MergeFrom(
      static_cast<const UIElement &>(from));
}


void UIElement::MergeFrom(const UIElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtxilib.oopclasses.protos.UIElement)
  DCHECK_NE(&from, this);
  ::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ax_label(from._internal_ax_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ax_frame()->::gtxilib::oopclasses::protos::Rect::MergeFrom(from._internal_ax_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      ax_traits_ = from.ax_traits_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_ax_element_ = from.is_ax_element_;
    }
    if (cached_has_bits & 0x00000010u) {
      ax_element_type_ = from.ax_element_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIElement::CopyFrom(const UIElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtxilib.oopclasses.protos.UIElement)
  if (&from == this) return;
  #ifndef NDEBUG
  size_t from_size = from.ByteSizeLong();
  #endif
  Clear();
  #ifndef NDEBUG
  CHECK_EQ(from_size, from.ByteSizeLong())
    << "Source of CopyFrom changed when clearing target.  Either "
       "source is a nested message in target (not allowed), or "
       "another thread is modifying the source.";
  #endif
  MergeFrom(from);
}

bool UIElement::IsInitialized() const {
  return true;
}

void UIElement::InternalSwap(UIElement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ax_label_, lhs_arena,
      &other->ax_label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIElement, ax_element_type_)
      + sizeof(UIElement::ax_element_type_)
      - PROTOBUF_FIELD_OFFSET(UIElement, ax_frame_)>(
          reinterpret_cast<char*>(&ax_frame_),
          reinterpret_cast<char*>(&other->ax_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UIElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mq4kUTL9cO7_getter, &descriptor_table_mq4kUTL9cO7_once,
      file_level_metadata_mq4kUTL9cO7[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace oopclasses
}  // namespace gtxilib
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gtxilib::oopclasses::protos::Point* Arena::CreateMaybeMessage< ::gtxilib::oopclasses::protos::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gtxilib::oopclasses::protos::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::gtxilib::oopclasses::protos::Size* Arena::CreateMaybeMessage< ::gtxilib::oopclasses::protos::Size >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gtxilib::oopclasses::protos::Size >(arena);
}
template<> PROTOBUF_NOINLINE ::gtxilib::oopclasses::protos::Rect* Arena::CreateMaybeMessage< ::gtxilib::oopclasses::protos::Rect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gtxilib::oopclasses::protos::Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::gtxilib::oopclasses::protos::ElementType* Arena::CreateMaybeMessage< ::gtxilib::oopclasses::protos::ElementType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gtxilib::oopclasses::protos::ElementType >(arena);
}
template<> PROTOBUF_NOINLINE ::gtxilib::oopclasses::protos::UIElement* Arena::CreateMaybeMessage< ::gtxilib::oopclasses::protos::UIElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gtxilib::oopclasses::protos::UIElement >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include "net/proto2/public/port_undef.inc"
