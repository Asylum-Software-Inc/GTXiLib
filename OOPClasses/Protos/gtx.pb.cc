// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtx.proto

#include "gtx.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_gtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rect_gtx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Size_gtx_2eproto;
namespace gtxilib {
namespace oopclasses {
namespace protos {
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class SizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Size> _instance;
} _Size_default_instance_;
class RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rect> _instance;
} _Rect_default_instance_;
class ElementTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElementType> _instance;
} _ElementType_default_instance_;
class UIElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UIElement> _instance;
} _UIElement_default_instance_;
}  // namespace protos
}  // namespace oopclasses
}  // namespace gtxilib
static void InitDefaultsscc_info_ElementType_gtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gtxilib::oopclasses::protos::_ElementType_default_instance_;
    new (ptr) ::gtxilib::oopclasses::protos::ElementType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gtxilib::oopclasses::protos::ElementType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ElementType_gtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ElementType_gtx_2eproto}, {}};

static void InitDefaultsscc_info_Point_gtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gtxilib::oopclasses::protos::_Point_default_instance_;
    new (ptr) ::gtxilib::oopclasses::protos::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gtxilib::oopclasses::protos::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_gtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_gtx_2eproto}, {}};

static void InitDefaultsscc_info_Rect_gtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gtxilib::oopclasses::protos::_Rect_default_instance_;
    new (ptr) ::gtxilib::oopclasses::protos::Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gtxilib::oopclasses::protos::Rect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rect_gtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Rect_gtx_2eproto}, {
      &scc_info_Point_gtx_2eproto.base,
      &scc_info_Size_gtx_2eproto.base,}};

static void InitDefaultsscc_info_Size_gtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gtxilib::oopclasses::protos::_Size_default_instance_;
    new (ptr) ::gtxilib::oopclasses::protos::Size();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gtxilib::oopclasses::protos::Size::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Size_gtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Size_gtx_2eproto}, {}};

static void InitDefaultsscc_info_UIElement_gtx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gtxilib::oopclasses::protos::_UIElement_default_instance_;
    new (ptr) ::gtxilib::oopclasses::protos::UIElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gtxilib::oopclasses::protos::UIElement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UIElement_gtx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UIElement_gtx_2eproto}, {
      &scc_info_Rect_gtx_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gtx_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gtx_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gtx_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gtx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Point, x_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Point, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Size, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Size, width_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Size, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Rect, origin_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::Rect, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::ElementType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, is_ax_element_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, ax_traits_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, ax_label_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, ax_frame_),
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::UIElement, ax_element_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gtxilib::oopclasses::protos::Point)},
  { 7, -1, sizeof(::gtxilib::oopclasses::protos::Size)},
  { 14, -1, sizeof(::gtxilib::oopclasses::protos::Rect)},
  { 21, -1, sizeof(::gtxilib::oopclasses::protos::ElementType)},
  { 26, -1, sizeof(::gtxilib::oopclasses::protos::UIElement)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gtxilib::oopclasses::protos::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gtxilib::oopclasses::protos::_Size_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gtxilib::oopclasses::protos::_Rect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gtxilib::oopclasses::protos::_ElementType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gtxilib::oopclasses::protos::_UIElement_default_instance_),
};

const char descriptor_table_protodef_gtx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tgtx.proto\022\031gtxilib.oopclasses.protos\"\035"
  "\n\005Point\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"%\n\004Size\022\r\n"
  "\005width\030\001 \001(\002\022\016\n\006height\030\002 \001(\002\"g\n\004Rect\0220\n\006"
  "origin\030\001 \001(\0132 .gtxilib.oopclasses.protos"
  ".Point\022-\n\004size\030\002 \001(\0132\037.gtxilib.oopclasse"
  "s.protos.Size\"\233\n\n\013ElementType\"\213\n\n\017Elemen"
  "tTypeEnum\022\007\n\003ANY\020\000\022\t\n\005OTHER\020\001\022\017\n\013APPLICA"
  "TION\020\002\022\t\n\005GROUP\020\003\022\n\n\006WINDOW\020\004\022\t\n\005SHEET\020\005"
  "\022\n\n\006DRAWER\020\006\022\t\n\005ALERT\020\007\022\n\n\006DIALOG\020\010\022\n\n\006B"
  "UTTON\020\t\022\020\n\014RADIO_BUTTON\020\n\022\017\n\013RADIO_GROUP"
  "\020\013\022\r\n\tCHECK_BOX\020\014\022\027\n\023DISCLOSURE_TRIANGLE"
  "\020\r\022\021\n\rPOP_UP_BUTTON\020\016\022\r\n\tCOMBO_BOX\020\017\022\017\n\013"
  "MENU_BUTTON\020\020\022\022\n\016TOOLBAR_BUTTON\020\021\022\013\n\007POP"
  "OVER\020\022\022\014\n\010KEYBOARD\020\023\022\007\n\003KEY\020\024\022\022\n\016NAVIGAT"
  "ION_BAR\020\025\022\013\n\007TAB_BAR\020\026\022\r\n\tTAB_GROUP\020\027\022\013\n"
  "\007TOOLBAR\020\030\022\016\n\nSTATUS_BAR\020\031\022\t\n\005TABLE\020\032\022\r\n"
  "\tTABLE_ROW\020\033\022\020\n\014TABLE_COLUMN\020\034\022\013\n\007OUTLIN"
  "E\020\035\022\017\n\013OUTLINE_ROW\020\036\022\013\n\007BROWSER\020\037\022\023\n\017COL"
  "LECTION_VIEW\020 \022\n\n\006SLIDER\020!\022\022\n\016PAGE_INDIC"
  "ATOR\020\"\022\026\n\022PROGRESS_INDICATOR\020#\022\026\n\022ACTIVI"
  "TY_INDICATOR\020$\022\025\n\021SEGMENTED_CONTROL\020%\022\n\n"
  "\006PICKER\020&\022\020\n\014PICKER_WHEEL\020\'\022\n\n\006SWITCH\020(\022"
  "\n\n\006TOGGLE\020)\022\010\n\004LINK\020*\022\t\n\005IMAGE\020+\022\010\n\004ICON"
  "\020,\022\020\n\014SEARCH_FIELD\020-\022\017\n\013SCROLL_VIEW\020.\022\016\n"
  "\nSCROLL_BAR\020/\022\017\n\013STATIC_TEXT\0200\022\016\n\nTEXT_F"
  "IELD\0201\022\025\n\021SECURE_TEXT_FIELD\0202\022\017\n\013DATE_PI"
  "CKER\0203\022\r\n\tTEXT_VIEW\0204\022\010\n\004MENU\0205\022\r\n\tMENU_"
  "ITEM\0206\022\014\n\010MENU_BAR\0207\022\021\n\rMENU_BAR_ITEM\0208\022"
  "\007\n\003MAP\0209\022\014\n\010WEB_VIEW\020:\022\023\n\017INCREMENT_ARRO"
  "W\020;\022\023\n\017DECREMENT_ARROW\020<\022\014\n\010TIMELINE\020=\022\024"
  "\n\020RATING_INDICATOR\020>\022\023\n\017VALUE_INDICATOR\020"
  "\?\022\017\n\013SPLIT_GROUP\020@\022\014\n\010SPLITTER\020A\022\027\n\023RELE"
  "VANCE_INDICATOR\020B\022\016\n\nCOLOR_WELL\020C\022\014\n\010HEL"
  "P_TAG\020D\022\t\n\005MATTE\020E\022\r\n\tDOCK_ITEM\020F\022\t\n\005RUL"
  "ER\020G\022\020\n\014RULER_MARKER\020H\022\010\n\004GRID\020I\022\023\n\017LEVE"
  "L_INDICATOR\020J\022\010\n\004CELL\020K\022\017\n\013LAYOUT_AREA\020L"
  "\022\017\n\013LAYOUT_ITEM\020M\022\n\n\006HANDLE\020N\022\013\n\007STEPPER"
  "\020O\022\007\n\003TAB\020P\022\r\n\tTOUCH_BAR\020Q\022\017\n\013STATUS_ITE"
  "M\020R\"\313\001\n\tUIElement\022\025\n\ris_ax_element\030\001 \001(\010"
  "\022\021\n\tax_traits\030\002 \001(\004\022\020\n\010ax_label\030\003 \001(\t\0221\n"
  "\010ax_frame\030\004 \001(\0132\037.gtxilib.oopclasses.pro"
  "tos.Rect\022O\n\017ax_element_type\030\005 \001(\01626.gtxi"
  "lib.oopclasses.protos.ElementType.Elemen"
  "tTypeEnumb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gtx_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gtx_2eproto_sccs[5] = {
  &scc_info_ElementType_gtx_2eproto.base,
  &scc_info_Point_gtx_2eproto.base,
  &scc_info_Rect_gtx_2eproto.base,
  &scc_info_Size_gtx_2eproto.base,
  &scc_info_UIElement_gtx_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gtx_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gtx_2eproto = {
  false, false, descriptor_table_protodef_gtx_2eproto, "gtx.proto", 1737,
  &descriptor_table_gtx_2eproto_once, descriptor_table_gtx_2eproto_sccs, descriptor_table_gtx_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_gtx_2eproto::offsets,
  file_level_metadata_gtx_2eproto, 5, file_level_enum_descriptors_gtx_2eproto, file_level_service_descriptors_gtx_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gtx_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gtx_2eproto)), true);
namespace gtxilib {
namespace oopclasses {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElementType_ElementTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtx_2eproto);
  return file_level_enum_descriptors_gtx_2eproto[0];
}
bool ElementType_ElementTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ElementType_ElementTypeEnum ElementType::ANY;
constexpr ElementType_ElementTypeEnum ElementType::OTHER;
constexpr ElementType_ElementTypeEnum ElementType::APPLICATION;
constexpr ElementType_ElementTypeEnum ElementType::GROUP;
constexpr ElementType_ElementTypeEnum ElementType::WINDOW;
constexpr ElementType_ElementTypeEnum ElementType::SHEET;
constexpr ElementType_ElementTypeEnum ElementType::DRAWER;
constexpr ElementType_ElementTypeEnum ElementType::ALERT;
constexpr ElementType_ElementTypeEnum ElementType::DIALOG;
constexpr ElementType_ElementTypeEnum ElementType::BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::RADIO_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::RADIO_GROUP;
constexpr ElementType_ElementTypeEnum ElementType::CHECK_BOX;
constexpr ElementType_ElementTypeEnum ElementType::DISCLOSURE_TRIANGLE;
constexpr ElementType_ElementTypeEnum ElementType::POP_UP_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::COMBO_BOX;
constexpr ElementType_ElementTypeEnum ElementType::MENU_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::TOOLBAR_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::POPOVER;
constexpr ElementType_ElementTypeEnum ElementType::KEYBOARD;
constexpr ElementType_ElementTypeEnum ElementType::KEY;
constexpr ElementType_ElementTypeEnum ElementType::NAVIGATION_BAR;
constexpr ElementType_ElementTypeEnum ElementType::TAB_BAR;
constexpr ElementType_ElementTypeEnum ElementType::TAB_GROUP;
constexpr ElementType_ElementTypeEnum ElementType::TOOLBAR;
constexpr ElementType_ElementTypeEnum ElementType::STATUS_BAR;
constexpr ElementType_ElementTypeEnum ElementType::TABLE;
constexpr ElementType_ElementTypeEnum ElementType::TABLE_ROW;
constexpr ElementType_ElementTypeEnum ElementType::TABLE_COLUMN;
constexpr ElementType_ElementTypeEnum ElementType::OUTLINE;
constexpr ElementType_ElementTypeEnum ElementType::OUTLINE_ROW;
constexpr ElementType_ElementTypeEnum ElementType::BROWSER;
constexpr ElementType_ElementTypeEnum ElementType::COLLECTION_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::SLIDER;
constexpr ElementType_ElementTypeEnum ElementType::PAGE_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::PROGRESS_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::ACTIVITY_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::SEGMENTED_CONTROL;
constexpr ElementType_ElementTypeEnum ElementType::PICKER;
constexpr ElementType_ElementTypeEnum ElementType::PICKER_WHEEL;
constexpr ElementType_ElementTypeEnum ElementType::SWITCH;
constexpr ElementType_ElementTypeEnum ElementType::TOGGLE;
constexpr ElementType_ElementTypeEnum ElementType::LINK;
constexpr ElementType_ElementTypeEnum ElementType::IMAGE;
constexpr ElementType_ElementTypeEnum ElementType::ICON;
constexpr ElementType_ElementTypeEnum ElementType::SEARCH_FIELD;
constexpr ElementType_ElementTypeEnum ElementType::SCROLL_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::SCROLL_BAR;
constexpr ElementType_ElementTypeEnum ElementType::STATIC_TEXT;
constexpr ElementType_ElementTypeEnum ElementType::TEXT_FIELD;
constexpr ElementType_ElementTypeEnum ElementType::SECURE_TEXT_FIELD;
constexpr ElementType_ElementTypeEnum ElementType::DATE_PICKER;
constexpr ElementType_ElementTypeEnum ElementType::TEXT_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::MENU;
constexpr ElementType_ElementTypeEnum ElementType::MENU_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::MENU_BAR;
constexpr ElementType_ElementTypeEnum ElementType::MENU_BAR_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::MAP;
constexpr ElementType_ElementTypeEnum ElementType::WEB_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::INCREMENT_ARROW;
constexpr ElementType_ElementTypeEnum ElementType::DECREMENT_ARROW;
constexpr ElementType_ElementTypeEnum ElementType::TIMELINE;
constexpr ElementType_ElementTypeEnum ElementType::RATING_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::VALUE_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::SPLIT_GROUP;
constexpr ElementType_ElementTypeEnum ElementType::SPLITTER;
constexpr ElementType_ElementTypeEnum ElementType::RELEVANCE_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::COLOR_WELL;
constexpr ElementType_ElementTypeEnum ElementType::HELP_TAG;
constexpr ElementType_ElementTypeEnum ElementType::MATTE;
constexpr ElementType_ElementTypeEnum ElementType::DOCK_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::RULER;
constexpr ElementType_ElementTypeEnum ElementType::RULER_MARKER;
constexpr ElementType_ElementTypeEnum ElementType::GRID;
constexpr ElementType_ElementTypeEnum ElementType::LEVEL_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::CELL;
constexpr ElementType_ElementTypeEnum ElementType::LAYOUT_AREA;
constexpr ElementType_ElementTypeEnum ElementType::LAYOUT_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::HANDLE;
constexpr ElementType_ElementTypeEnum ElementType::STEPPER;
constexpr ElementType_ElementTypeEnum ElementType::TAB;
constexpr ElementType_ElementTypeEnum ElementType::TOUCH_BAR;
constexpr ElementType_ElementTypeEnum ElementType::STATUS_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::ElementTypeEnum_MIN;
constexpr ElementType_ElementTypeEnum ElementType::ElementTypeEnum_MAX;
constexpr int ElementType::ElementTypeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gtxilib.oopclasses.protos.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:gtxilib.oopclasses.protos.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:gtxilib.oopclasses.protos.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_gtx_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:gtxilib.oopclasses.protos.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtxilib.oopclasses.protos.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gtxilib.oopclasses.protos.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gtxilib.oopclasses.protos.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gtxilib.oopclasses.protos.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gtxilib.oopclasses.protos.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gtxilib.oopclasses.protos.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtxilib.oopclasses.protos.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gtxilib.oopclasses.protos.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtxilib.oopclasses.protos.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Size::InitAsDefaultInstance() {
}
class Size::_Internal {
 public:
};

Size::Size(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gtxilib.oopclasses.protos.Size)
}
Size::Size(const Size& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:gtxilib.oopclasses.protos.Size)
}

void Size::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Size::~Size() {
  // @@protoc_insertion_point(destructor:gtxilib.oopclasses.protos.Size)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Size::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Size::ArenaDtor(void* object) {
  Size* _this = reinterpret_cast< Size* >(object);
  (void)_this;
}
void Size::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Size& Size::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Size_gtx_2eproto.base);
  return *internal_default_instance();
}


void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:gtxilib.oopclasses.protos.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Size::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Size::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtxilib.oopclasses.protos.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float width = 1;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_width(), target);
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gtxilib.oopclasses.protos.Size)
  return target;
}

size_t Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gtxilib.oopclasses.protos.Size)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float width = 1;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Size::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gtxilib.oopclasses.protos.Size)
  GOOGLE_DCHECK_NE(&from, this);
  const Size* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Size>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gtxilib.oopclasses.protos.Size)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gtxilib.oopclasses.protos.Size)
    MergeFrom(*source);
  }
}

void Size::MergeFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtxilib.oopclasses.protos.Size)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
}

void Size::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gtxilib.oopclasses.protos.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtxilib.oopclasses.protos.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  return true;
}

void Size::InternalSwap(Size* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Size, height_)
      + sizeof(Size::height_)
      - PROTOBUF_FIELD_OFFSET(Size, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Size::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rect::InitAsDefaultInstance() {
  ::gtxilib::oopclasses::protos::_Rect_default_instance_._instance.get_mutable()->origin_ = const_cast< ::gtxilib::oopclasses::protos::Point*>(
      ::gtxilib::oopclasses::protos::Point::internal_default_instance());
  ::gtxilib::oopclasses::protos::_Rect_default_instance_._instance.get_mutable()->size_ = const_cast< ::gtxilib::oopclasses::protos::Size*>(
      ::gtxilib::oopclasses::protos::Size::internal_default_instance());
}
class Rect::_Internal {
 public:
  static const ::gtxilib::oopclasses::protos::Point& origin(const Rect* msg);
  static const ::gtxilib::oopclasses::protos::Size& size(const Rect* msg);
};

const ::gtxilib::oopclasses::protos::Point&
Rect::_Internal::origin(const Rect* msg) {
  return *msg->origin_;
}
const ::gtxilib::oopclasses::protos::Size&
Rect::_Internal::size(const Rect* msg) {
  return *msg->size_;
}
Rect::Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gtxilib.oopclasses.protos.Rect)
}
Rect::Rect(const Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::gtxilib::oopclasses::protos::Point(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::gtxilib::oopclasses::protos::Size(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gtxilib.oopclasses.protos.Rect)
}

void Rect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rect_gtx_2eproto.base);
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(size_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:gtxilib.oopclasses.protos.Rect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete size_;
}

void Rect::ArenaDtor(void* object) {
  Rect* _this = reinterpret_cast< Rect* >(object);
  (void)_this;
}
void Rect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect& Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rect_gtx_2eproto.base);
  return *internal_default_instance();
}


void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:gtxilib.oopclasses.protos.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gtxilib.oopclasses.protos.Point origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gtxilib.oopclasses.protos.Size size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtxilib.oopclasses.protos.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gtxilib.oopclasses.protos.Point origin = 1;
  if (this->has_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // .gtxilib.oopclasses.protos.Size size = 2;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gtxilib.oopclasses.protos.Rect)
  return target;
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gtxilib.oopclasses.protos.Rect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gtxilib.oopclasses.protos.Point origin = 1;
  if (this->has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // .gtxilib.oopclasses.protos.Size size = 2;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gtxilib.oopclasses.protos.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gtxilib.oopclasses.protos.Rect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gtxilib.oopclasses.protos.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtxilib.oopclasses.protos.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_origin()) {
    _internal_mutable_origin()->::gtxilib::oopclasses::protos::Point::MergeFrom(from._internal_origin());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::gtxilib::oopclasses::protos::Size::MergeFrom(from._internal_size());
  }
}

void Rect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gtxilib.oopclasses.protos.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtxilib.oopclasses.protos.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::InternalSwap(Rect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect, size_)
      + sizeof(Rect::size_)
      - PROTOBUF_FIELD_OFFSET(Rect, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ElementType::InitAsDefaultInstance() {
}
class ElementType::_Internal {
 public:
};

ElementType::ElementType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gtxilib.oopclasses.protos.ElementType)
}
ElementType::ElementType(const ElementType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gtxilib.oopclasses.protos.ElementType)
}

void ElementType::SharedCtor() {
}

ElementType::~ElementType() {
  // @@protoc_insertion_point(destructor:gtxilib.oopclasses.protos.ElementType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElementType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ElementType::ArenaDtor(void* object) {
  ElementType* _this = reinterpret_cast< ElementType* >(object);
  (void)_this;
}
void ElementType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElementType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElementType& ElementType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElementType_gtx_2eproto.base);
  return *internal_default_instance();
}


void ElementType::Clear() {
// @@protoc_insertion_point(message_clear_start:gtxilib.oopclasses.protos.ElementType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElementType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElementType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtxilib.oopclasses.protos.ElementType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gtxilib.oopclasses.protos.ElementType)
  return target;
}

size_t ElementType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gtxilib.oopclasses.protos.ElementType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gtxilib.oopclasses.protos.ElementType)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElementType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gtxilib.oopclasses.protos.ElementType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gtxilib.oopclasses.protos.ElementType)
    MergeFrom(*source);
  }
}

void ElementType::MergeFrom(const ElementType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtxilib.oopclasses.protos.ElementType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ElementType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gtxilib.oopclasses.protos.ElementType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementType::CopyFrom(const ElementType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtxilib.oopclasses.protos.ElementType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementType::IsInitialized() const {
  return true;
}

void ElementType::InternalSwap(ElementType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ElementType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UIElement::InitAsDefaultInstance() {
  ::gtxilib::oopclasses::protos::_UIElement_default_instance_._instance.get_mutable()->ax_frame_ = const_cast< ::gtxilib::oopclasses::protos::Rect*>(
      ::gtxilib::oopclasses::protos::Rect::internal_default_instance());
}
class UIElement::_Internal {
 public:
  static const ::gtxilib::oopclasses::protos::Rect& ax_frame(const UIElement* msg);
};

const ::gtxilib::oopclasses::protos::Rect&
UIElement::_Internal::ax_frame(const UIElement* msg) {
  return *msg->ax_frame_;
}
UIElement::UIElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gtxilib.oopclasses.protos.UIElement)
}
UIElement::UIElement(const UIElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ax_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ax_label().empty()) {
    ax_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ax_label(),
      GetArena());
  }
  if (from._internal_has_ax_frame()) {
    ax_frame_ = new ::gtxilib::oopclasses::protos::Rect(*from.ax_frame_);
  } else {
    ax_frame_ = nullptr;
  }
  ::memcpy(&ax_traits_, &from.ax_traits_,
    static_cast<size_t>(reinterpret_cast<char*>(&ax_element_type_) -
    reinterpret_cast<char*>(&ax_traits_)) + sizeof(ax_element_type_));
  // @@protoc_insertion_point(copy_constructor:gtxilib.oopclasses.protos.UIElement)
}

void UIElement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UIElement_gtx_2eproto.base);
  ax_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ax_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ax_element_type_) -
      reinterpret_cast<char*>(&ax_frame_)) + sizeof(ax_element_type_));
}

UIElement::~UIElement() {
  // @@protoc_insertion_point(destructor:gtxilib.oopclasses.protos.UIElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UIElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ax_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ax_frame_;
}

void UIElement::ArenaDtor(void* object) {
  UIElement* _this = reinterpret_cast< UIElement* >(object);
  (void)_this;
}
void UIElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UIElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UIElement& UIElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UIElement_gtx_2eproto.base);
  return *internal_default_instance();
}


void UIElement::Clear() {
// @@protoc_insertion_point(message_clear_start:gtxilib.oopclasses.protos.UIElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ax_label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && ax_frame_ != nullptr) {
    delete ax_frame_;
  }
  ax_frame_ = nullptr;
  ::memset(&ax_traits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ax_element_type_) -
      reinterpret_cast<char*>(&ax_traits_)) + sizeof(ax_element_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_ax_element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_ax_element_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ax_traits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ax_traits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ax_label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ax_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gtxilib.oopclasses.protos.UIElement.ax_label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gtxilib.oopclasses.protos.Rect ax_frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ax_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gtxilib.oopclasses.protos.ElementType.ElementTypeEnum ax_element_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ax_element_type(static_cast<::gtxilib::oopclasses::protos::ElementType_ElementTypeEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UIElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtxilib.oopclasses.protos.UIElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ax_element = 1;
  if (this->is_ax_element() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_ax_element(), target);
  }

  // uint64 ax_traits = 2;
  if (this->ax_traits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ax_traits(), target);
  }

  // string ax_label = 3;
  if (this->ax_label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ax_label().data(), static_cast<int>(this->_internal_ax_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gtxilib.oopclasses.protos.UIElement.ax_label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ax_label(), target);
  }

  // .gtxilib.oopclasses.protos.Rect ax_frame = 4;
  if (this->has_ax_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ax_frame(this), target, stream);
  }

  // .gtxilib.oopclasses.protos.ElementType.ElementTypeEnum ax_element_type = 5;
  if (this->ax_element_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_ax_element_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gtxilib.oopclasses.protos.UIElement)
  return target;
}

size_t UIElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gtxilib.oopclasses.protos.UIElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ax_label = 3;
  if (this->ax_label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ax_label());
  }

  // .gtxilib.oopclasses.protos.Rect ax_frame = 4;
  if (this->has_ax_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ax_frame_);
  }

  // uint64 ax_traits = 2;
  if (this->ax_traits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ax_traits());
  }

  // bool is_ax_element = 1;
  if (this->is_ax_element() != 0) {
    total_size += 1 + 1;
  }

  // .gtxilib.oopclasses.protos.ElementType.ElementTypeEnum ax_element_type = 5;
  if (this->ax_element_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ax_element_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UIElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gtxilib.oopclasses.protos.UIElement)
  GOOGLE_DCHECK_NE(&from, this);
  const UIElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UIElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gtxilib.oopclasses.protos.UIElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gtxilib.oopclasses.protos.UIElement)
    MergeFrom(*source);
  }
}

void UIElement::MergeFrom(const UIElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtxilib.oopclasses.protos.UIElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ax_label().size() > 0) {
    _internal_set_ax_label(from._internal_ax_label());
  }
  if (from.has_ax_frame()) {
    _internal_mutable_ax_frame()->::gtxilib::oopclasses::protos::Rect::MergeFrom(from._internal_ax_frame());
  }
  if (from.ax_traits() != 0) {
    _internal_set_ax_traits(from._internal_ax_traits());
  }
  if (from.is_ax_element() != 0) {
    _internal_set_is_ax_element(from._internal_is_ax_element());
  }
  if (from.ax_element_type() != 0) {
    _internal_set_ax_element_type(from._internal_ax_element_type());
  }
}

void UIElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gtxilib.oopclasses.protos.UIElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIElement::CopyFrom(const UIElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtxilib.oopclasses.protos.UIElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIElement::IsInitialized() const {
  return true;
}

void UIElement::InternalSwap(UIElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ax_label_.Swap(&other->ax_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIElement, ax_element_type_)
      + sizeof(UIElement::ax_element_type_)
      - PROTOBUF_FIELD_OFFSET(UIElement, ax_frame_)>(
          reinterpret_cast<char*>(&ax_frame_),
          reinterpret_cast<char*>(&other->ax_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UIElement::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace oopclasses
}  // namespace gtxilib
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gtxilib::oopclasses::protos::Point* Arena::CreateMaybeMessage< ::gtxilib::oopclasses::protos::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gtxilib::oopclasses::protos::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::gtxilib::oopclasses::protos::Size* Arena::CreateMaybeMessage< ::gtxilib::oopclasses::protos::Size >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gtxilib::oopclasses::protos::Size >(arena);
}
template<> PROTOBUF_NOINLINE ::gtxilib::oopclasses::protos::Rect* Arena::CreateMaybeMessage< ::gtxilib::oopclasses::protos::Rect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gtxilib::oopclasses::protos::Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::gtxilib::oopclasses::protos::ElementType* Arena::CreateMaybeMessage< ::gtxilib::oopclasses::protos::ElementType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gtxilib::oopclasses::protos::ElementType >(arena);
}
template<> PROTOBUF_NOINLINE ::gtxilib::oopclasses::protos::UIElement* Arena::CreateMaybeMessage< ::gtxilib::oopclasses::protos::UIElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gtxilib::oopclasses::protos::UIElement >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
