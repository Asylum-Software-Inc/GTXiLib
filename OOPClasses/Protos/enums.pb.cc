// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

#include "enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gtxilib {
namespace oopclasses {
namespace protos {
class ElementTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElementType> _instance;
} _ElementType_default_instance_;
}  // namespace protos
}  // namespace oopclasses
}  // namespace gtxilib
static void InitDefaultsscc_info_ElementType_enums_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gtxilib::oopclasses::protos::_ElementType_default_instance_;
    new (ptr) ::gtxilib::oopclasses::protos::ElementType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gtxilib::oopclasses::protos::ElementType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ElementType_enums_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ElementType_enums_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_enums_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_enums_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_enums_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_enums_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gtxilib::oopclasses::protos::ElementType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gtxilib::oopclasses::protos::ElementType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gtxilib::oopclasses::protos::_ElementType_default_instance_),
};

const char descriptor_table_protodef_enums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013enums.proto\022\031gtxilib.oopclasses.protos"
  "\"\233\n\n\013ElementType\"\213\n\n\017ElementTypeEnum\022\007\n\003"
  "ANY\020\000\022\t\n\005OTHER\020\001\022\017\n\013APPLICATION\020\002\022\t\n\005GRO"
  "UP\020\003\022\n\n\006WINDOW\020\004\022\t\n\005SHEET\020\005\022\n\n\006DRAWER\020\006\022"
  "\t\n\005ALERT\020\007\022\n\n\006DIALOG\020\010\022\n\n\006BUTTON\020\t\022\020\n\014RA"
  "DIO_BUTTON\020\n\022\017\n\013RADIO_GROUP\020\013\022\r\n\tCHECK_B"
  "OX\020\014\022\027\n\023DISCLOSURE_TRIANGLE\020\r\022\021\n\rPOP_UP_"
  "BUTTON\020\016\022\r\n\tCOMBO_BOX\020\017\022\017\n\013MENU_BUTTON\020\020"
  "\022\022\n\016TOOLBAR_BUTTON\020\021\022\013\n\007POPOVER\020\022\022\014\n\010KEY"
  "BOARD\020\023\022\007\n\003KEY\020\024\022\022\n\016NAVIGATION_BAR\020\025\022\013\n\007"
  "TAB_BAR\020\026\022\r\n\tTAB_GROUP\020\027\022\013\n\007TOOLBAR\020\030\022\016\n"
  "\nSTATUS_BAR\020\031\022\t\n\005TABLE\020\032\022\r\n\tTABLE_ROW\020\033\022"
  "\020\n\014TABLE_COLUMN\020\034\022\013\n\007OUTLINE\020\035\022\017\n\013OUTLIN"
  "E_ROW\020\036\022\013\n\007BROWSER\020\037\022\023\n\017COLLECTION_VIEW\020"
  " \022\n\n\006SLIDER\020!\022\022\n\016PAGE_INDICATOR\020\"\022\026\n\022PRO"
  "GRESS_INDICATOR\020#\022\026\n\022ACTIVITY_INDICATOR\020"
  "$\022\025\n\021SEGMENTED_CONTROL\020%\022\n\n\006PICKER\020&\022\020\n\014"
  "PICKER_WHEEL\020\'\022\n\n\006SWITCH\020(\022\n\n\006TOGGLE\020)\022\010"
  "\n\004LINK\020*\022\t\n\005IMAGE\020+\022\010\n\004ICON\020,\022\020\n\014SEARCH_"
  "FIELD\020-\022\017\n\013SCROLL_VIEW\020.\022\016\n\nSCROLL_BAR\020/"
  "\022\017\n\013STATIC_TEXT\0200\022\016\n\nTEXT_FIELD\0201\022\025\n\021SEC"
  "URE_TEXT_FIELD\0202\022\017\n\013DATE_PICKER\0203\022\r\n\tTEX"
  "T_VIEW\0204\022\010\n\004MENU\0205\022\r\n\tMENU_ITEM\0206\022\014\n\010MEN"
  "U_BAR\0207\022\021\n\rMENU_BAR_ITEM\0208\022\007\n\003MAP\0209\022\014\n\010W"
  "EB_VIEW\020:\022\023\n\017INCREMENT_ARROW\020;\022\023\n\017DECREM"
  "ENT_ARROW\020<\022\014\n\010TIMELINE\020=\022\024\n\020RATING_INDI"
  "CATOR\020>\022\023\n\017VALUE_INDICATOR\020\?\022\017\n\013SPLIT_GR"
  "OUP\020@\022\014\n\010SPLITTER\020A\022\027\n\023RELEVANCE_INDICAT"
  "OR\020B\022\016\n\nCOLOR_WELL\020C\022\014\n\010HELP_TAG\020D\022\t\n\005MA"
  "TTE\020E\022\r\n\tDOCK_ITEM\020F\022\t\n\005RULER\020G\022\020\n\014RULER"
  "_MARKER\020H\022\010\n\004GRID\020I\022\023\n\017LEVEL_INDICATOR\020J"
  "\022\010\n\004CELL\020K\022\017\n\013LAYOUT_AREA\020L\022\017\n\013LAYOUT_IT"
  "EM\020M\022\n\n\006HANDLE\020N\022\013\n\007STEPPER\020O\022\007\n\003TAB\020P\022\r"
  "\n\tTOUCH_BAR\020Q\022\017\n\013STATUS_ITEM\020R*k\n\nResult"
  "Type\022\027\n\023RESULT_TYPE_UNKNOWN\020\000\022\025\n\021RESULT_"
  "TYPE_ERROR\020\001\022\027\n\023RESULT_TYPE_WARNING\020\002\022\024\n"
  "\020RESULT_TYPE_INFO\020\003B\010P\001\242\002\003GTXb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_enums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_enums_2eproto_sccs[1] = {
  &scc_info_ElementType_enums_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_enums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enums_2eproto = {
  false, false, descriptor_table_protodef_enums_2eproto, "enums.proto", 1477,
  &descriptor_table_enums_2eproto_once, descriptor_table_enums_2eproto_sccs, descriptor_table_enums_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_enums_2eproto::offsets,
  file_level_metadata_enums_2eproto, 1, file_level_enum_descriptors_enums_2eproto, file_level_service_descriptors_enums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_enums_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_enums_2eproto)), true);
namespace gtxilib {
namespace oopclasses {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElementType_ElementTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[0];
}
bool ElementType_ElementTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ElementType_ElementTypeEnum ElementType::ANY;
constexpr ElementType_ElementTypeEnum ElementType::OTHER;
constexpr ElementType_ElementTypeEnum ElementType::APPLICATION;
constexpr ElementType_ElementTypeEnum ElementType::GROUP;
constexpr ElementType_ElementTypeEnum ElementType::WINDOW;
constexpr ElementType_ElementTypeEnum ElementType::SHEET;
constexpr ElementType_ElementTypeEnum ElementType::DRAWER;
constexpr ElementType_ElementTypeEnum ElementType::ALERT;
constexpr ElementType_ElementTypeEnum ElementType::DIALOG;
constexpr ElementType_ElementTypeEnum ElementType::BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::RADIO_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::RADIO_GROUP;
constexpr ElementType_ElementTypeEnum ElementType::CHECK_BOX;
constexpr ElementType_ElementTypeEnum ElementType::DISCLOSURE_TRIANGLE;
constexpr ElementType_ElementTypeEnum ElementType::POP_UP_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::COMBO_BOX;
constexpr ElementType_ElementTypeEnum ElementType::MENU_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::TOOLBAR_BUTTON;
constexpr ElementType_ElementTypeEnum ElementType::POPOVER;
constexpr ElementType_ElementTypeEnum ElementType::KEYBOARD;
constexpr ElementType_ElementTypeEnum ElementType::KEY;
constexpr ElementType_ElementTypeEnum ElementType::NAVIGATION_BAR;
constexpr ElementType_ElementTypeEnum ElementType::TAB_BAR;
constexpr ElementType_ElementTypeEnum ElementType::TAB_GROUP;
constexpr ElementType_ElementTypeEnum ElementType::TOOLBAR;
constexpr ElementType_ElementTypeEnum ElementType::STATUS_BAR;
constexpr ElementType_ElementTypeEnum ElementType::TABLE;
constexpr ElementType_ElementTypeEnum ElementType::TABLE_ROW;
constexpr ElementType_ElementTypeEnum ElementType::TABLE_COLUMN;
constexpr ElementType_ElementTypeEnum ElementType::OUTLINE;
constexpr ElementType_ElementTypeEnum ElementType::OUTLINE_ROW;
constexpr ElementType_ElementTypeEnum ElementType::BROWSER;
constexpr ElementType_ElementTypeEnum ElementType::COLLECTION_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::SLIDER;
constexpr ElementType_ElementTypeEnum ElementType::PAGE_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::PROGRESS_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::ACTIVITY_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::SEGMENTED_CONTROL;
constexpr ElementType_ElementTypeEnum ElementType::PICKER;
constexpr ElementType_ElementTypeEnum ElementType::PICKER_WHEEL;
constexpr ElementType_ElementTypeEnum ElementType::SWITCH;
constexpr ElementType_ElementTypeEnum ElementType::TOGGLE;
constexpr ElementType_ElementTypeEnum ElementType::LINK;
constexpr ElementType_ElementTypeEnum ElementType::IMAGE;
constexpr ElementType_ElementTypeEnum ElementType::ICON;
constexpr ElementType_ElementTypeEnum ElementType::SEARCH_FIELD;
constexpr ElementType_ElementTypeEnum ElementType::SCROLL_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::SCROLL_BAR;
constexpr ElementType_ElementTypeEnum ElementType::STATIC_TEXT;
constexpr ElementType_ElementTypeEnum ElementType::TEXT_FIELD;
constexpr ElementType_ElementTypeEnum ElementType::SECURE_TEXT_FIELD;
constexpr ElementType_ElementTypeEnum ElementType::DATE_PICKER;
constexpr ElementType_ElementTypeEnum ElementType::TEXT_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::MENU;
constexpr ElementType_ElementTypeEnum ElementType::MENU_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::MENU_BAR;
constexpr ElementType_ElementTypeEnum ElementType::MENU_BAR_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::MAP;
constexpr ElementType_ElementTypeEnum ElementType::WEB_VIEW;
constexpr ElementType_ElementTypeEnum ElementType::INCREMENT_ARROW;
constexpr ElementType_ElementTypeEnum ElementType::DECREMENT_ARROW;
constexpr ElementType_ElementTypeEnum ElementType::TIMELINE;
constexpr ElementType_ElementTypeEnum ElementType::RATING_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::VALUE_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::SPLIT_GROUP;
constexpr ElementType_ElementTypeEnum ElementType::SPLITTER;
constexpr ElementType_ElementTypeEnum ElementType::RELEVANCE_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::COLOR_WELL;
constexpr ElementType_ElementTypeEnum ElementType::HELP_TAG;
constexpr ElementType_ElementTypeEnum ElementType::MATTE;
constexpr ElementType_ElementTypeEnum ElementType::DOCK_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::RULER;
constexpr ElementType_ElementTypeEnum ElementType::RULER_MARKER;
constexpr ElementType_ElementTypeEnum ElementType::GRID;
constexpr ElementType_ElementTypeEnum ElementType::LEVEL_INDICATOR;
constexpr ElementType_ElementTypeEnum ElementType::CELL;
constexpr ElementType_ElementTypeEnum ElementType::LAYOUT_AREA;
constexpr ElementType_ElementTypeEnum ElementType::LAYOUT_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::HANDLE;
constexpr ElementType_ElementTypeEnum ElementType::STEPPER;
constexpr ElementType_ElementTypeEnum ElementType::TAB;
constexpr ElementType_ElementTypeEnum ElementType::TOUCH_BAR;
constexpr ElementType_ElementTypeEnum ElementType::STATUS_ITEM;
constexpr ElementType_ElementTypeEnum ElementType::ElementTypeEnum_MIN;
constexpr ElementType_ElementTypeEnum ElementType::ElementTypeEnum_MAX;
constexpr int ElementType::ElementTypeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[1];
}
bool ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ElementType::InitAsDefaultInstance() {
}
class ElementType::_Internal {
 public:
};

ElementType::ElementType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gtxilib.oopclasses.protos.ElementType)
}
ElementType::ElementType(const ElementType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gtxilib.oopclasses.protos.ElementType)
}

void ElementType::SharedCtor() {
}

ElementType::~ElementType() {
  // @@protoc_insertion_point(destructor:gtxilib.oopclasses.protos.ElementType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElementType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ElementType::ArenaDtor(void* object) {
  ElementType* _this = reinterpret_cast< ElementType* >(object);
  (void)_this;
}
void ElementType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElementType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElementType& ElementType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElementType_enums_2eproto.base);
  return *internal_default_instance();
}


void ElementType::Clear() {
// @@protoc_insertion_point(message_clear_start:gtxilib.oopclasses.protos.ElementType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElementType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElementType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gtxilib.oopclasses.protos.ElementType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gtxilib.oopclasses.protos.ElementType)
  return target;
}

size_t ElementType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gtxilib.oopclasses.protos.ElementType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gtxilib.oopclasses.protos.ElementType)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElementType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gtxilib.oopclasses.protos.ElementType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gtxilib.oopclasses.protos.ElementType)
    MergeFrom(*source);
  }
}

void ElementType::MergeFrom(const ElementType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gtxilib.oopclasses.protos.ElementType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ElementType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gtxilib.oopclasses.protos.ElementType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementType::CopyFrom(const ElementType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gtxilib.oopclasses.protos.ElementType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementType::IsInitialized() const {
  return true;
}

void ElementType::InternalSwap(ElementType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ElementType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace oopclasses
}  // namespace gtxilib
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gtxilib::oopclasses::protos::ElementType* Arena::CreateMaybeMessage< ::gtxilib::oopclasses::protos::ElementType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gtxilib::oopclasses::protos::ElementType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
