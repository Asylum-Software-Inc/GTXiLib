// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_result_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_result_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
#include "gtx.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_result_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_result_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_result_2eproto;
namespace gtxilib {
namespace oopclasses {
namespace protos {
class AccessibilityEvaluation;
class AccessibilityEvaluationDefaultTypeInternal;
extern AccessibilityEvaluationDefaultTypeInternal _AccessibilityEvaluation_default_instance_;
class CheckResultProto;
class CheckResultProtoDefaultTypeInternal;
extern CheckResultProtoDefaultTypeInternal _CheckResultProto_default_instance_;
class IntListProto;
class IntListProtoDefaultTypeInternal;
extern IntListProtoDefaultTypeInternal _IntListProto_default_instance_;
class MetadataProto;
class MetadataProtoDefaultTypeInternal;
extern MetadataProtoDefaultTypeInternal _MetadataProto_default_instance_;
class MetadataProto_MetadataMapEntry_DoNotUse;
class MetadataProto_MetadataMapEntry_DoNotUseDefaultTypeInternal;
extern MetadataProto_MetadataMapEntry_DoNotUseDefaultTypeInternal _MetadataProto_MetadataMapEntry_DoNotUse_default_instance_;
class StringListProto;
class StringListProtoDefaultTypeInternal;
extern StringListProtoDefaultTypeInternal _StringListProto_default_instance_;
class TypedValueProto;
class TypedValueProtoDefaultTypeInternal;
extern TypedValueProtoDefaultTypeInternal _TypedValueProto_default_instance_;
}  // namespace protos
}  // namespace oopclasses
}  // namespace gtxilib
PROTOBUF_NAMESPACE_OPEN
template<> ::gtxilib::oopclasses::protos::AccessibilityEvaluation* Arena::CreateMaybeMessage<::gtxilib::oopclasses::protos::AccessibilityEvaluation>(Arena*);
template<> ::gtxilib::oopclasses::protos::CheckResultProto* Arena::CreateMaybeMessage<::gtxilib::oopclasses::protos::CheckResultProto>(Arena*);
template<> ::gtxilib::oopclasses::protos::IntListProto* Arena::CreateMaybeMessage<::gtxilib::oopclasses::protos::IntListProto>(Arena*);
template<> ::gtxilib::oopclasses::protos::MetadataProto* Arena::CreateMaybeMessage<::gtxilib::oopclasses::protos::MetadataProto>(Arena*);
template<> ::gtxilib::oopclasses::protos::MetadataProto_MetadataMapEntry_DoNotUse* Arena::CreateMaybeMessage<::gtxilib::oopclasses::protos::MetadataProto_MetadataMapEntry_DoNotUse>(Arena*);
template<> ::gtxilib::oopclasses::protos::StringListProto* Arena::CreateMaybeMessage<::gtxilib::oopclasses::protos::StringListProto>(Arena*);
template<> ::gtxilib::oopclasses::protos::TypedValueProto* Arena::CreateMaybeMessage<::gtxilib::oopclasses::protos::TypedValueProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gtxilib {
namespace oopclasses {
namespace protos {

enum TypedValueProto_TypeProto : int {
  TypedValueProto_TypeProto_UNKNOWN = 0,
  TypedValueProto_TypeProto_BOOLEAN = 1,
  TypedValueProto_TypeProto_BYTE = 2,
  TypedValueProto_TypeProto_SHORT = 3,
  TypedValueProto_TypeProto_CHAR = 4,
  TypedValueProto_TypeProto_INT = 5,
  TypedValueProto_TypeProto_FLOAT = 6,
  TypedValueProto_TypeProto_LONG = 7,
  TypedValueProto_TypeProto_DOUBLE = 8,
  TypedValueProto_TypeProto_STRING = 9,
  TypedValueProto_TypeProto_STRING_LIST = 10,
  TypedValueProto_TypeProto_INT_LIST = 11,
  TypedValueProto_TypeProto_TypedValueProto_TypeProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TypedValueProto_TypeProto_TypedValueProto_TypeProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TypedValueProto_TypeProto_IsValid(int value);
constexpr TypedValueProto_TypeProto TypedValueProto_TypeProto_TypeProto_MIN = TypedValueProto_TypeProto_UNKNOWN;
constexpr TypedValueProto_TypeProto TypedValueProto_TypeProto_TypeProto_MAX = TypedValueProto_TypeProto_INT_LIST;
constexpr int TypedValueProto_TypeProto_TypeProto_ARRAYSIZE = TypedValueProto_TypeProto_TypeProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypedValueProto_TypeProto_descriptor();
template<typename T>
inline const std::string& TypedValueProto_TypeProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TypedValueProto_TypeProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TypedValueProto_TypeProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TypedValueProto_TypeProto_descriptor(), enum_t_value);
}
inline bool TypedValueProto_TypeProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TypedValueProto_TypeProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TypedValueProto_TypeProto>(
    TypedValueProto_TypeProto_descriptor(), name, value);
}
// ===================================================================

class StringListProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gtxilib.oopclasses.protos.StringListProto) */ {
 public:
  inline StringListProto() : StringListProto(nullptr) {}
  virtual ~StringListProto();

  StringListProto(const StringListProto& from);
  StringListProto(StringListProto&& from) noexcept
    : StringListProto() {
    *this = ::std::move(from);
  }

  inline StringListProto& operator=(const StringListProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringListProto& operator=(StringListProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringListProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringListProto* internal_default_instance() {
    return reinterpret_cast<const StringListProto*>(
               &_StringListProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StringListProto& a, StringListProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StringListProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringListProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringListProto* New() const final {
    return CreateMaybeMessage<StringListProto>(nullptr);
  }

  StringListProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringListProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringListProto& from);
  void MergeFrom(const StringListProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringListProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gtxilib.oopclasses.protos.StringListProto";
  }
  protected:
  explicit StringListProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_result_2eproto);
    return ::descriptor_table_result_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // @@protoc_insertion_point(class_scope:gtxilib.oopclasses.protos.StringListProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_result_2eproto;
};
// -------------------------------------------------------------------

class IntListProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gtxilib.oopclasses.protos.IntListProto) */ {
 public:
  inline IntListProto() : IntListProto(nullptr) {}
  virtual ~IntListProto();

  IntListProto(const IntListProto& from);
  IntListProto(IntListProto&& from) noexcept
    : IntListProto() {
    *this = ::std::move(from);
  }

  inline IntListProto& operator=(const IntListProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntListProto& operator=(IntListProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntListProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntListProto* internal_default_instance() {
    return reinterpret_cast<const IntListProto*>(
               &_IntListProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IntListProto& a, IntListProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IntListProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntListProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntListProto* New() const final {
    return CreateMaybeMessage<IntListProto>(nullptr);
  }

  IntListProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntListProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntListProto& from);
  void MergeFrom(const IntListProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntListProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gtxilib.oopclasses.protos.IntListProto";
  }
  protected:
  explicit IntListProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_result_2eproto);
    return ::descriptor_table_result_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int32 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:gtxilib.oopclasses.protos.IntListProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_result_2eproto;
};
// -------------------------------------------------------------------

class TypedValueProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gtxilib.oopclasses.protos.TypedValueProto) */ {
 public:
  inline TypedValueProto() : TypedValueProto(nullptr) {}
  virtual ~TypedValueProto();

  TypedValueProto(const TypedValueProto& from);
  TypedValueProto(TypedValueProto&& from) noexcept
    : TypedValueProto() {
    *this = ::std::move(from);
  }

  inline TypedValueProto& operator=(const TypedValueProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypedValueProto& operator=(TypedValueProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypedValueProto& default_instance();

  enum ValueCase {
    kBooleanValue = 2,
    kByteValue = 3,
    kShortValue = 4,
    kCharValue = 5,
    kIntValue = 6,
    kFloatValue = 7,
    kLongValue = 8,
    kDoubleValue = 9,
    kStringValue = 10,
    kStringListValue = 11,
    kIntListValue = 12,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypedValueProto* internal_default_instance() {
    return reinterpret_cast<const TypedValueProto*>(
               &_TypedValueProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TypedValueProto& a, TypedValueProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TypedValueProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypedValueProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypedValueProto* New() const final {
    return CreateMaybeMessage<TypedValueProto>(nullptr);
  }

  TypedValueProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypedValueProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypedValueProto& from);
  void MergeFrom(const TypedValueProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypedValueProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gtxilib.oopclasses.protos.TypedValueProto";
  }
  protected:
  explicit TypedValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_result_2eproto);
    return ::descriptor_table_result_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TypedValueProto_TypeProto TypeProto;
  static constexpr TypeProto UNKNOWN =
    TypedValueProto_TypeProto_UNKNOWN;
  static constexpr TypeProto BOOLEAN =
    TypedValueProto_TypeProto_BOOLEAN;
  static constexpr TypeProto BYTE =
    TypedValueProto_TypeProto_BYTE;
  static constexpr TypeProto SHORT =
    TypedValueProto_TypeProto_SHORT;
  static constexpr TypeProto CHAR =
    TypedValueProto_TypeProto_CHAR;
  static constexpr TypeProto INT =
    TypedValueProto_TypeProto_INT;
  static constexpr TypeProto FLOAT =
    TypedValueProto_TypeProto_FLOAT;
  static constexpr TypeProto LONG =
    TypedValueProto_TypeProto_LONG;
  static constexpr TypeProto DOUBLE =
    TypedValueProto_TypeProto_DOUBLE;
  static constexpr TypeProto STRING =
    TypedValueProto_TypeProto_STRING;
  static constexpr TypeProto STRING_LIST =
    TypedValueProto_TypeProto_STRING_LIST;
  static constexpr TypeProto INT_LIST =
    TypedValueProto_TypeProto_INT_LIST;
  static inline bool TypeProto_IsValid(int value) {
    return TypedValueProto_TypeProto_IsValid(value);
  }
  static constexpr TypeProto TypeProto_MIN =
    TypedValueProto_TypeProto_TypeProto_MIN;
  static constexpr TypeProto TypeProto_MAX =
    TypedValueProto_TypeProto_TypeProto_MAX;
  static constexpr int TypeProto_ARRAYSIZE =
    TypedValueProto_TypeProto_TypeProto_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TypeProto_descriptor() {
    return TypedValueProto_TypeProto_descriptor();
  }
  template<typename T>
  static inline const std::string& TypeProto_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TypeProto>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TypeProto_Name.");
    return TypedValueProto_TypeProto_Name(enum_t_value);
  }
  static inline bool TypeProto_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TypeProto* value) {
    return TypedValueProto_TypeProto_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kBooleanValueFieldNumber = 2,
    kByteValueFieldNumber = 3,
    kShortValueFieldNumber = 4,
    kCharValueFieldNumber = 5,
    kIntValueFieldNumber = 6,
    kFloatValueFieldNumber = 7,
    kLongValueFieldNumber = 8,
    kDoubleValueFieldNumber = 9,
    kStringValueFieldNumber = 10,
    kStringListValueFieldNumber = 11,
    kIntListValueFieldNumber = 12,
  };
  // .gtxilib.oopclasses.protos.TypedValueProto.TypeProto type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::gtxilib::oopclasses::protos::TypedValueProto_TypeProto type() const;
  void set_type(::gtxilib::oopclasses::protos::TypedValueProto_TypeProto value);
  private:
  ::gtxilib::oopclasses::protos::TypedValueProto_TypeProto _internal_type() const;
  void _internal_set_type(::gtxilib::oopclasses::protos::TypedValueProto_TypeProto value);
  public:

  // bool boolean_value = 2;
  private:
  bool _internal_has_boolean_value() const;
  public:
  void clear_boolean_value();
  bool boolean_value() const;
  void set_boolean_value(bool value);
  private:
  bool _internal_boolean_value() const;
  void _internal_set_boolean_value(bool value);
  public:

  // bytes byte_value = 3;
  private:
  bool _internal_has_byte_value() const;
  public:
  void clear_byte_value();
  const std::string& byte_value() const;
  void set_byte_value(const std::string& value);
  void set_byte_value(std::string&& value);
  void set_byte_value(const char* value);
  void set_byte_value(const void* value, size_t size);
  std::string* mutable_byte_value();
  std::string* release_byte_value();
  void set_allocated_byte_value(std::string* byte_value);
  private:
  const std::string& _internal_byte_value() const;
  void _internal_set_byte_value(const std::string& value);
  std::string* _internal_mutable_byte_value();
  public:

  // bytes short_value = 4;
  private:
  bool _internal_has_short_value() const;
  public:
  void clear_short_value();
  const std::string& short_value() const;
  void set_short_value(const std::string& value);
  void set_short_value(std::string&& value);
  void set_short_value(const char* value);
  void set_short_value(const void* value, size_t size);
  std::string* mutable_short_value();
  std::string* release_short_value();
  void set_allocated_short_value(std::string* short_value);
  private:
  const std::string& _internal_short_value() const;
  void _internal_set_short_value(const std::string& value);
  std::string* _internal_mutable_short_value();
  public:

  // bytes char_value = 5;
  private:
  bool _internal_has_char_value() const;
  public:
  void clear_char_value();
  const std::string& char_value() const;
  void set_char_value(const std::string& value);
  void set_char_value(std::string&& value);
  void set_char_value(const char* value);
  void set_char_value(const void* value, size_t size);
  std::string* mutable_char_value();
  std::string* release_char_value();
  void set_allocated_char_value(std::string* char_value);
  private:
  const std::string& _internal_char_value() const;
  void _internal_set_char_value(const std::string& value);
  std::string* _internal_mutable_char_value();
  public:

  // int32 int_value = 6;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float float_value = 7;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // int64 long_value = 8;
  private:
  bool _internal_has_long_value() const;
  public:
  void clear_long_value();
  ::PROTOBUF_NAMESPACE_ID::int64 long_value() const;
  void set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_long_value() const;
  void _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double double_value = 9;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string string_value = 10;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // .gtxilib.oopclasses.protos.StringListProto string_list_value = 11;
  bool has_string_list_value() const;
  private:
  bool _internal_has_string_list_value() const;
  public:
  void clear_string_list_value();
  const ::gtxilib::oopclasses::protos::StringListProto& string_list_value() const;
  ::gtxilib::oopclasses::protos::StringListProto* release_string_list_value();
  ::gtxilib::oopclasses::protos::StringListProto* mutable_string_list_value();
  void set_allocated_string_list_value(::gtxilib::oopclasses::protos::StringListProto* string_list_value);
  private:
  const ::gtxilib::oopclasses::protos::StringListProto& _internal_string_list_value() const;
  ::gtxilib::oopclasses::protos::StringListProto* _internal_mutable_string_list_value();
  public:
  void unsafe_arena_set_allocated_string_list_value(
      ::gtxilib::oopclasses::protos::StringListProto* string_list_value);
  ::gtxilib::oopclasses::protos::StringListProto* unsafe_arena_release_string_list_value();

  // .gtxilib.oopclasses.protos.IntListProto int_list_value = 12;
  bool has_int_list_value() const;
  private:
  bool _internal_has_int_list_value() const;
  public:
  void clear_int_list_value();
  const ::gtxilib::oopclasses::protos::IntListProto& int_list_value() const;
  ::gtxilib::oopclasses::protos::IntListProto* release_int_list_value();
  ::gtxilib::oopclasses::protos::IntListProto* mutable_int_list_value();
  void set_allocated_int_list_value(::gtxilib::oopclasses::protos::IntListProto* int_list_value);
  private:
  const ::gtxilib::oopclasses::protos::IntListProto& _internal_int_list_value() const;
  ::gtxilib::oopclasses::protos::IntListProto* _internal_mutable_int_list_value();
  public:
  void unsafe_arena_set_allocated_int_list_value(
      ::gtxilib::oopclasses::protos::IntListProto* int_list_value);
  ::gtxilib::oopclasses::protos::IntListProto* unsafe_arena_release_int_list_value();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:gtxilib.oopclasses.protos.TypedValueProto)
 private:
  class _Internal;
  void set_has_boolean_value();
  void set_has_byte_value();
  void set_has_short_value();
  void set_has_char_value();
  void set_has_int_value();
  void set_has_float_value();
  void set_has_long_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_string_list_value();
  void set_has_int_list_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  union ValueUnion {
    ValueUnion() {}
    bool boolean_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr byte_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr char_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 int_value_;
    float float_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 long_value_;
    double double_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::gtxilib::oopclasses::protos::StringListProto* string_list_value_;
    ::gtxilib::oopclasses::protos::IntListProto* int_list_value_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_result_2eproto;
};
// -------------------------------------------------------------------

class MetadataProto_MetadataMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetadataProto_MetadataMapEntry_DoNotUse, 
    std::string, ::gtxilib::oopclasses::protos::TypedValueProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetadataProto_MetadataMapEntry_DoNotUse, 
    std::string, ::gtxilib::oopclasses::protos::TypedValueProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MetadataProto_MetadataMapEntry_DoNotUse();
  explicit MetadataProto_MetadataMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MetadataProto_MetadataMapEntry_DoNotUse& other);
  static const MetadataProto_MetadataMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MetadataProto_MetadataMapEntry_DoNotUse*>(&_MetadataProto_MetadataMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gtxilib.oopclasses.protos.MetadataProto.MetadataMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_result_2eproto);
    return ::descriptor_table_result_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class MetadataProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gtxilib.oopclasses.protos.MetadataProto) */ {
 public:
  inline MetadataProto() : MetadataProto(nullptr) {}
  virtual ~MetadataProto();

  MetadataProto(const MetadataProto& from);
  MetadataProto(MetadataProto&& from) noexcept
    : MetadataProto() {
    *this = ::std::move(from);
  }

  inline MetadataProto& operator=(const MetadataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataProto& operator=(MetadataProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetadataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetadataProto* internal_default_instance() {
    return reinterpret_cast<const MetadataProto*>(
               &_MetadataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MetadataProto& a, MetadataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetadataProto* New() const final {
    return CreateMaybeMessage<MetadataProto>(nullptr);
  }

  MetadataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetadataProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetadataProto& from);
  void MergeFrom(const MetadataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gtxilib.oopclasses.protos.MetadataProto";
  }
  protected:
  explicit MetadataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_result_2eproto);
    return ::descriptor_table_result_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataMapFieldNumber = 1,
  };
  // map<string, .gtxilib.oopclasses.protos.TypedValueProto> metadata_map = 1;
  int metadata_map_size() const;
  private:
  int _internal_metadata_map_size() const;
  public:
  void clear_metadata_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gtxilib::oopclasses::protos::TypedValueProto >&
      _internal_metadata_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gtxilib::oopclasses::protos::TypedValueProto >*
      _internal_mutable_metadata_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gtxilib::oopclasses::protos::TypedValueProto >&
      metadata_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gtxilib::oopclasses::protos::TypedValueProto >*
      mutable_metadata_map();

  // @@protoc_insertion_point(class_scope:gtxilib.oopclasses.protos.MetadataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MetadataProto_MetadataMapEntry_DoNotUse,
      std::string, ::gtxilib::oopclasses::protos::TypedValueProto,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > metadata_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_result_2eproto;
};
// -------------------------------------------------------------------

class CheckResultProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gtxilib.oopclasses.protos.CheckResultProto) */ {
 public:
  inline CheckResultProto() : CheckResultProto(nullptr) {}
  virtual ~CheckResultProto();

  CheckResultProto(const CheckResultProto& from);
  CheckResultProto(CheckResultProto&& from) noexcept
    : CheckResultProto() {
    *this = ::std::move(from);
  }

  inline CheckResultProto& operator=(const CheckResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckResultProto& operator=(CheckResultProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckResultProto* internal_default_instance() {
    return reinterpret_cast<const CheckResultProto*>(
               &_CheckResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CheckResultProto& a, CheckResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckResultProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckResultProto* New() const final {
    return CreateMaybeMessage<CheckResultProto>(nullptr);
  }

  CheckResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckResultProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckResultProto& from);
  void MergeFrom(const CheckResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gtxilib.oopclasses.protos.CheckResultProto";
  }
  protected:
  explicit CheckResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_result_2eproto);
    return ::descriptor_table_result_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceCheckClassFieldNumber = 1,
    kMetadataFieldNumber = 5,
    kHierarchySourceIdFieldNumber = 3,
    kResultIdFieldNumber = 2,
    kResultTypeFieldNumber = 4,
  };
  // string source_check_class = 1;
  void clear_source_check_class();
  const std::string& source_check_class() const;
  void set_source_check_class(const std::string& value);
  void set_source_check_class(std::string&& value);
  void set_source_check_class(const char* value);
  void set_source_check_class(const char* value, size_t size);
  std::string* mutable_source_check_class();
  std::string* release_source_check_class();
  void set_allocated_source_check_class(std::string* source_check_class);
  private:
  const std::string& _internal_source_check_class() const;
  void _internal_set_source_check_class(const std::string& value);
  std::string* _internal_mutable_source_check_class();
  public:

  // .gtxilib.oopclasses.protos.MetadataProto metadata = 5;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::gtxilib::oopclasses::protos::MetadataProto& metadata() const;
  ::gtxilib::oopclasses::protos::MetadataProto* release_metadata();
  ::gtxilib::oopclasses::protos::MetadataProto* mutable_metadata();
  void set_allocated_metadata(::gtxilib::oopclasses::protos::MetadataProto* metadata);
  private:
  const ::gtxilib::oopclasses::protos::MetadataProto& _internal_metadata() const;
  ::gtxilib::oopclasses::protos::MetadataProto* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::gtxilib::oopclasses::protos::MetadataProto* metadata);
  ::gtxilib::oopclasses::protos::MetadataProto* unsafe_arena_release_metadata();

  // int64 hierarchy_source_id = 3;
  bool has_hierarchy_source_id() const;
  private:
  bool _internal_has_hierarchy_source_id() const;
  public:
  void clear_hierarchy_source_id();
  ::PROTOBUF_NAMESPACE_ID::int64 hierarchy_source_id() const;
  void set_hierarchy_source_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_hierarchy_source_id() const;
  void _internal_set_hierarchy_source_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 result_id = 2;
  void clear_result_id();
  ::PROTOBUF_NAMESPACE_ID::int32 result_id() const;
  void set_result_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_id() const;
  void _internal_set_result_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .gtxilib.oopclasses.protos.ResultType result_type = 4;
  void clear_result_type();
  ::gtxilib::oopclasses::protos::ResultType result_type() const;
  void set_result_type(::gtxilib::oopclasses::protos::ResultType value);
  private:
  ::gtxilib::oopclasses::protos::ResultType _internal_result_type() const;
  void _internal_set_result_type(::gtxilib::oopclasses::protos::ResultType value);
  public:

  // @@protoc_insertion_point(class_scope:gtxilib.oopclasses.protos.CheckResultProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_check_class_;
  ::gtxilib::oopclasses::protos::MetadataProto* metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 hierarchy_source_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_id_;
  int result_type_;
  friend struct ::TableStruct_result_2eproto;
};
// -------------------------------------------------------------------

class AccessibilityEvaluation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gtxilib.oopclasses.protos.AccessibilityEvaluation) */ {
 public:
  inline AccessibilityEvaluation() : AccessibilityEvaluation(nullptr) {}
  virtual ~AccessibilityEvaluation();

  AccessibilityEvaluation(const AccessibilityEvaluation& from);
  AccessibilityEvaluation(AccessibilityEvaluation&& from) noexcept
    : AccessibilityEvaluation() {
    *this = ::std::move(from);
  }

  inline AccessibilityEvaluation& operator=(const AccessibilityEvaluation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessibilityEvaluation& operator=(AccessibilityEvaluation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccessibilityEvaluation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessibilityEvaluation* internal_default_instance() {
    return reinterpret_cast<const AccessibilityEvaluation*>(
               &_AccessibilityEvaluation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AccessibilityEvaluation& a, AccessibilityEvaluation& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessibilityEvaluation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessibilityEvaluation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccessibilityEvaluation* New() const final {
    return CreateMaybeMessage<AccessibilityEvaluation>(nullptr);
  }

  AccessibilityEvaluation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccessibilityEvaluation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccessibilityEvaluation& from);
  void MergeFrom(const AccessibilityEvaluation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessibilityEvaluation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gtxilib.oopclasses.protos.AccessibilityEvaluation";
  }
  protected:
  explicit AccessibilityEvaluation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_result_2eproto);
    return ::descriptor_table_result_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kHierarchyFieldNumber = 1,
  };
  // repeated .gtxilib.oopclasses.protos.CheckResultProto results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::gtxilib::oopclasses::protos::CheckResultProto* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gtxilib::oopclasses::protos::CheckResultProto >*
      mutable_results();
  private:
  const ::gtxilib::oopclasses::protos::CheckResultProto& _internal_results(int index) const;
  ::gtxilib::oopclasses::protos::CheckResultProto* _internal_add_results();
  public:
  const ::gtxilib::oopclasses::protos::CheckResultProto& results(int index) const;
  ::gtxilib::oopclasses::protos::CheckResultProto* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gtxilib::oopclasses::protos::CheckResultProto >&
      results() const;

  // .gtxilib.oopclasses.protos.AccessibilityHierarchy hierarchy = 1;
  bool has_hierarchy() const;
  private:
  bool _internal_has_hierarchy() const;
  public:
  void clear_hierarchy();
  const ::gtxilib::oopclasses::protos::AccessibilityHierarchy& hierarchy() const;
  ::gtxilib::oopclasses::protos::AccessibilityHierarchy* release_hierarchy();
  ::gtxilib::oopclasses::protos::AccessibilityHierarchy* mutable_hierarchy();
  void set_allocated_hierarchy(::gtxilib::oopclasses::protos::AccessibilityHierarchy* hierarchy);
  private:
  const ::gtxilib::oopclasses::protos::AccessibilityHierarchy& _internal_hierarchy() const;
  ::gtxilib::oopclasses::protos::AccessibilityHierarchy* _internal_mutable_hierarchy();
  public:
  void unsafe_arena_set_allocated_hierarchy(
      ::gtxilib::oopclasses::protos::AccessibilityHierarchy* hierarchy);
  ::gtxilib::oopclasses::protos::AccessibilityHierarchy* unsafe_arena_release_hierarchy();

  // @@protoc_insertion_point(class_scope:gtxilib.oopclasses.protos.AccessibilityEvaluation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gtxilib::oopclasses::protos::CheckResultProto > results_;
  ::gtxilib::oopclasses::protos::AccessibilityHierarchy* hierarchy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_result_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringListProto

// repeated string values = 1;
inline int StringListProto::_internal_values_size() const {
  return values_.size();
}
inline int StringListProto::values_size() const {
  return _internal_values_size();
}
inline void StringListProto::clear_values() {
  values_.Clear();
}
inline std::string* StringListProto::add_values() {
  // @@protoc_insertion_point(field_add_mutable:gtxilib.oopclasses.protos.StringListProto.values)
  return _internal_add_values();
}
inline const std::string& StringListProto::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& StringListProto::values(int index) const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.StringListProto.values)
  return _internal_values(index);
}
inline std::string* StringListProto::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:gtxilib.oopclasses.protos.StringListProto.values)
  return values_.Mutable(index);
}
inline void StringListProto::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.StringListProto.values)
  values_.Mutable(index)->assign(value);
}
inline void StringListProto::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.StringListProto.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void StringListProto::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gtxilib.oopclasses.protos.StringListProto.values)
}
inline void StringListProto::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gtxilib.oopclasses.protos.StringListProto.values)
}
inline std::string* StringListProto::_internal_add_values() {
  return values_.Add();
}
inline void StringListProto::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gtxilib.oopclasses.protos.StringListProto.values)
}
inline void StringListProto::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gtxilib.oopclasses.protos.StringListProto.values)
}
inline void StringListProto::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gtxilib.oopclasses.protos.StringListProto.values)
}
inline void StringListProto::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gtxilib.oopclasses.protos.StringListProto.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringListProto::values() const {
  // @@protoc_insertion_point(field_list:gtxilib.oopclasses.protos.StringListProto.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringListProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:gtxilib.oopclasses.protos.StringListProto.values)
  return &values_;
}

// -------------------------------------------------------------------

// IntListProto

// repeated int32 values = 1;
inline int IntListProto::_internal_values_size() const {
  return values_.size();
}
inline int IntListProto::values_size() const {
  return _internal_values_size();
}
inline void IntListProto::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntListProto::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntListProto::values(int index) const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.IntListProto.values)
  return _internal_values(index);
}
inline void IntListProto::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.IntListProto.values)
}
inline void IntListProto::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Add(value);
}
inline void IntListProto::add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:gtxilib.oopclasses.protos.IntListProto.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntListProto::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntListProto::values() const {
  // @@protoc_insertion_point(field_list:gtxilib.oopclasses.protos.IntListProto.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntListProto::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntListProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:gtxilib.oopclasses.protos.IntListProto.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// TypedValueProto

// .gtxilib.oopclasses.protos.TypedValueProto.TypeProto type = 1;
inline bool TypedValueProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TypedValueProto::has_type() const {
  return _internal_has_type();
}
inline void TypedValueProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::gtxilib::oopclasses::protos::TypedValueProto_TypeProto TypedValueProto::_internal_type() const {
  return static_cast< ::gtxilib::oopclasses::protos::TypedValueProto_TypeProto >(type_);
}
inline ::gtxilib::oopclasses::protos::TypedValueProto_TypeProto TypedValueProto::type() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.type)
  return _internal_type();
}
inline void TypedValueProto::_internal_set_type(::gtxilib::oopclasses::protos::TypedValueProto_TypeProto value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void TypedValueProto::set_type(::gtxilib::oopclasses::protos::TypedValueProto_TypeProto value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.type)
}

// bool boolean_value = 2;
inline bool TypedValueProto::_internal_has_boolean_value() const {
  return value_case() == kBooleanValue;
}
inline void TypedValueProto::set_has_boolean_value() {
  _oneof_case_[0] = kBooleanValue;
}
inline void TypedValueProto::clear_boolean_value() {
  if (_internal_has_boolean_value()) {
    value_.boolean_value_ = false;
    clear_has_value();
  }
}
inline bool TypedValueProto::_internal_boolean_value() const {
  if (_internal_has_boolean_value()) {
    return value_.boolean_value_;
  }
  return false;
}
inline void TypedValueProto::_internal_set_boolean_value(bool value) {
  if (!_internal_has_boolean_value()) {
    clear_value();
    set_has_boolean_value();
  }
  value_.boolean_value_ = value;
}
inline bool TypedValueProto::boolean_value() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.boolean_value)
  return _internal_boolean_value();
}
inline void TypedValueProto::set_boolean_value(bool value) {
  _internal_set_boolean_value(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.boolean_value)
}

// bytes byte_value = 3;
inline bool TypedValueProto::_internal_has_byte_value() const {
  return value_case() == kByteValue;
}
inline void TypedValueProto::set_has_byte_value() {
  _oneof_case_[0] = kByteValue;
}
inline void TypedValueProto::clear_byte_value() {
  if (_internal_has_byte_value()) {
    value_.byte_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& TypedValueProto::byte_value() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.byte_value)
  return _internal_byte_value();
}
inline void TypedValueProto::set_byte_value(const std::string& value) {
  _internal_set_byte_value(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.byte_value)
}
inline std::string* TypedValueProto::mutable_byte_value() {
  // @@protoc_insertion_point(field_mutable:gtxilib.oopclasses.protos.TypedValueProto.byte_value)
  return _internal_mutable_byte_value();
}
inline const std::string& TypedValueProto::_internal_byte_value() const {
  if (_internal_has_byte_value()) {
    return value_.byte_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValueProto::_internal_set_byte_value(const std::string& value) {
  if (!_internal_has_byte_value()) {
    clear_value();
    set_has_byte_value();
    value_.byte_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.byte_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TypedValueProto::set_byte_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.byte_value)
  if (!_internal_has_byte_value()) {
    clear_value();
    set_has_byte_value();
    value_.byte_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.byte_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gtxilib.oopclasses.protos.TypedValueProto.byte_value)
}
inline void TypedValueProto::set_byte_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_byte_value()) {
    clear_value();
    set_has_byte_value();
    value_.byte_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.byte_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:gtxilib.oopclasses.protos.TypedValueProto.byte_value)
}
inline void TypedValueProto::set_byte_value(const void* value,
                             size_t size) {
  if (!_internal_has_byte_value()) {
    clear_value();
    set_has_byte_value();
    value_.byte_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.byte_value_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:gtxilib.oopclasses.protos.TypedValueProto.byte_value)
}
inline std::string* TypedValueProto::_internal_mutable_byte_value() {
  if (!_internal_has_byte_value()) {
    clear_value();
    set_has_byte_value();
    value_.byte_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.byte_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TypedValueProto::release_byte_value() {
  // @@protoc_insertion_point(field_release:gtxilib.oopclasses.protos.TypedValueProto.byte_value)
  if (_internal_has_byte_value()) {
    clear_has_value();
    return value_.byte_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TypedValueProto::set_allocated_byte_value(std::string* byte_value) {
  if (has_value()) {
    clear_value();
  }
  if (byte_value != nullptr) {
    set_has_byte_value();
    value_.byte_value_.UnsafeSetDefault(byte_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(byte_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:gtxilib.oopclasses.protos.TypedValueProto.byte_value)
}

// bytes short_value = 4;
inline bool TypedValueProto::_internal_has_short_value() const {
  return value_case() == kShortValue;
}
inline void TypedValueProto::set_has_short_value() {
  _oneof_case_[0] = kShortValue;
}
inline void TypedValueProto::clear_short_value() {
  if (_internal_has_short_value()) {
    value_.short_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& TypedValueProto::short_value() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.short_value)
  return _internal_short_value();
}
inline void TypedValueProto::set_short_value(const std::string& value) {
  _internal_set_short_value(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.short_value)
}
inline std::string* TypedValueProto::mutable_short_value() {
  // @@protoc_insertion_point(field_mutable:gtxilib.oopclasses.protos.TypedValueProto.short_value)
  return _internal_mutable_short_value();
}
inline const std::string& TypedValueProto::_internal_short_value() const {
  if (_internal_has_short_value()) {
    return value_.short_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValueProto::_internal_set_short_value(const std::string& value) {
  if (!_internal_has_short_value()) {
    clear_value();
    set_has_short_value();
    value_.short_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.short_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TypedValueProto::set_short_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.short_value)
  if (!_internal_has_short_value()) {
    clear_value();
    set_has_short_value();
    value_.short_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.short_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gtxilib.oopclasses.protos.TypedValueProto.short_value)
}
inline void TypedValueProto::set_short_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_short_value()) {
    clear_value();
    set_has_short_value();
    value_.short_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.short_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:gtxilib.oopclasses.protos.TypedValueProto.short_value)
}
inline void TypedValueProto::set_short_value(const void* value,
                             size_t size) {
  if (!_internal_has_short_value()) {
    clear_value();
    set_has_short_value();
    value_.short_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.short_value_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:gtxilib.oopclasses.protos.TypedValueProto.short_value)
}
inline std::string* TypedValueProto::_internal_mutable_short_value() {
  if (!_internal_has_short_value()) {
    clear_value();
    set_has_short_value();
    value_.short_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.short_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TypedValueProto::release_short_value() {
  // @@protoc_insertion_point(field_release:gtxilib.oopclasses.protos.TypedValueProto.short_value)
  if (_internal_has_short_value()) {
    clear_has_value();
    return value_.short_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TypedValueProto::set_allocated_short_value(std::string* short_value) {
  if (has_value()) {
    clear_value();
  }
  if (short_value != nullptr) {
    set_has_short_value();
    value_.short_value_.UnsafeSetDefault(short_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(short_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:gtxilib.oopclasses.protos.TypedValueProto.short_value)
}

// bytes char_value = 5;
inline bool TypedValueProto::_internal_has_char_value() const {
  return value_case() == kCharValue;
}
inline void TypedValueProto::set_has_char_value() {
  _oneof_case_[0] = kCharValue;
}
inline void TypedValueProto::clear_char_value() {
  if (_internal_has_char_value()) {
    value_.char_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& TypedValueProto::char_value() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.char_value)
  return _internal_char_value();
}
inline void TypedValueProto::set_char_value(const std::string& value) {
  _internal_set_char_value(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.char_value)
}
inline std::string* TypedValueProto::mutable_char_value() {
  // @@protoc_insertion_point(field_mutable:gtxilib.oopclasses.protos.TypedValueProto.char_value)
  return _internal_mutable_char_value();
}
inline const std::string& TypedValueProto::_internal_char_value() const {
  if (_internal_has_char_value()) {
    return value_.char_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValueProto::_internal_set_char_value(const std::string& value) {
  if (!_internal_has_char_value()) {
    clear_value();
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.char_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TypedValueProto::set_char_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.char_value)
  if (!_internal_has_char_value()) {
    clear_value();
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.char_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gtxilib.oopclasses.protos.TypedValueProto.char_value)
}
inline void TypedValueProto::set_char_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_char_value()) {
    clear_value();
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.char_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:gtxilib.oopclasses.protos.TypedValueProto.char_value)
}
inline void TypedValueProto::set_char_value(const void* value,
                             size_t size) {
  if (!_internal_has_char_value()) {
    clear_value();
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.char_value_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:gtxilib.oopclasses.protos.TypedValueProto.char_value)
}
inline std::string* TypedValueProto::_internal_mutable_char_value() {
  if (!_internal_has_char_value()) {
    clear_value();
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.char_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TypedValueProto::release_char_value() {
  // @@protoc_insertion_point(field_release:gtxilib.oopclasses.protos.TypedValueProto.char_value)
  if (_internal_has_char_value()) {
    clear_has_value();
    return value_.char_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TypedValueProto::set_allocated_char_value(std::string* char_value) {
  if (has_value()) {
    clear_value();
  }
  if (char_value != nullptr) {
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(char_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(char_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:gtxilib.oopclasses.protos.TypedValueProto.char_value)
}

// int32 int_value = 6;
inline bool TypedValueProto::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline void TypedValueProto::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void TypedValueProto::clear_int_value() {
  if (_internal_has_int_value()) {
    value_.int_value_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TypedValueProto::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return value_.int_value_;
  }
  return 0;
}
inline void TypedValueProto::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TypedValueProto::int_value() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.int_value)
  return _internal_int_value();
}
inline void TypedValueProto::set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.int_value)
}

// float float_value = 7;
inline bool TypedValueProto::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline void TypedValueProto::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void TypedValueProto::clear_float_value() {
  if (_internal_has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float TypedValueProto::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void TypedValueProto::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
}
inline float TypedValueProto::float_value() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.float_value)
  return _internal_float_value();
}
inline void TypedValueProto::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.float_value)
}

// int64 long_value = 8;
inline bool TypedValueProto::_internal_has_long_value() const {
  return value_case() == kLongValue;
}
inline void TypedValueProto::set_has_long_value() {
  _oneof_case_[0] = kLongValue;
}
inline void TypedValueProto::clear_long_value() {
  if (_internal_has_long_value()) {
    value_.long_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TypedValueProto::_internal_long_value() const {
  if (_internal_has_long_value()) {
    return value_.long_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TypedValueProto::_internal_set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_long_value()) {
    clear_value();
    set_has_long_value();
  }
  value_.long_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TypedValueProto::long_value() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.long_value)
  return _internal_long_value();
}
inline void TypedValueProto::set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_long_value(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.long_value)
}

// double double_value = 9;
inline bool TypedValueProto::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void TypedValueProto::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void TypedValueProto::clear_double_value() {
  if (_internal_has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double TypedValueProto::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void TypedValueProto::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
}
inline double TypedValueProto::double_value() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.double_value)
  return _internal_double_value();
}
inline void TypedValueProto::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.double_value)
}

// string string_value = 10;
inline bool TypedValueProto::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline void TypedValueProto::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void TypedValueProto::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& TypedValueProto::string_value() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.string_value)
  return _internal_string_value();
}
inline void TypedValueProto::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.string_value)
}
inline std::string* TypedValueProto::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:gtxilib.oopclasses.protos.TypedValueProto.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& TypedValueProto::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValueProto::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TypedValueProto::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.TypedValueProto.string_value)
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gtxilib.oopclasses.protos.TypedValueProto.string_value)
}
inline void TypedValueProto::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:gtxilib.oopclasses.protos.TypedValueProto.string_value)
}
inline void TypedValueProto::set_string_value(const char* value,
                             size_t size) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:gtxilib.oopclasses.protos.TypedValueProto.string_value)
}
inline std::string* TypedValueProto::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TypedValueProto::release_string_value() {
  // @@protoc_insertion_point(field_release:gtxilib.oopclasses.protos.TypedValueProto.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TypedValueProto::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:gtxilib.oopclasses.protos.TypedValueProto.string_value)
}

// .gtxilib.oopclasses.protos.StringListProto string_list_value = 11;
inline bool TypedValueProto::_internal_has_string_list_value() const {
  return value_case() == kStringListValue;
}
inline bool TypedValueProto::has_string_list_value() const {
  return _internal_has_string_list_value();
}
inline void TypedValueProto::set_has_string_list_value() {
  _oneof_case_[0] = kStringListValue;
}
inline void TypedValueProto::clear_string_list_value() {
  if (_internal_has_string_list_value()) {
    if (GetArena() == nullptr) {
      delete value_.string_list_value_;
    }
    clear_has_value();
  }
}
inline ::gtxilib::oopclasses::protos::StringListProto* TypedValueProto::release_string_list_value() {
  // @@protoc_insertion_point(field_release:gtxilib.oopclasses.protos.TypedValueProto.string_list_value)
  if (_internal_has_string_list_value()) {
    clear_has_value();
      ::gtxilib::oopclasses::protos::StringListProto* temp = value_.string_list_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.string_list_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gtxilib::oopclasses::protos::StringListProto& TypedValueProto::_internal_string_list_value() const {
  return _internal_has_string_list_value()
      ? *value_.string_list_value_
      : *reinterpret_cast< ::gtxilib::oopclasses::protos::StringListProto*>(&::gtxilib::oopclasses::protos::_StringListProto_default_instance_);
}
inline const ::gtxilib::oopclasses::protos::StringListProto& TypedValueProto::string_list_value() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.string_list_value)
  return _internal_string_list_value();
}
inline ::gtxilib::oopclasses::protos::StringListProto* TypedValueProto::unsafe_arena_release_string_list_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gtxilib.oopclasses.protos.TypedValueProto.string_list_value)
  if (_internal_has_string_list_value()) {
    clear_has_value();
    ::gtxilib::oopclasses::protos::StringListProto* temp = value_.string_list_value_;
    value_.string_list_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TypedValueProto::unsafe_arena_set_allocated_string_list_value(::gtxilib::oopclasses::protos::StringListProto* string_list_value) {
  clear_value();
  if (string_list_value) {
    set_has_string_list_value();
    value_.string_list_value_ = string_list_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gtxilib.oopclasses.protos.TypedValueProto.string_list_value)
}
inline ::gtxilib::oopclasses::protos::StringListProto* TypedValueProto::_internal_mutable_string_list_value() {
  if (!_internal_has_string_list_value()) {
    clear_value();
    set_has_string_list_value();
    value_.string_list_value_ = CreateMaybeMessage< ::gtxilib::oopclasses::protos::StringListProto >(GetArena());
  }
  return value_.string_list_value_;
}
inline ::gtxilib::oopclasses::protos::StringListProto* TypedValueProto::mutable_string_list_value() {
  // @@protoc_insertion_point(field_mutable:gtxilib.oopclasses.protos.TypedValueProto.string_list_value)
  return _internal_mutable_string_list_value();
}

// .gtxilib.oopclasses.protos.IntListProto int_list_value = 12;
inline bool TypedValueProto::_internal_has_int_list_value() const {
  return value_case() == kIntListValue;
}
inline bool TypedValueProto::has_int_list_value() const {
  return _internal_has_int_list_value();
}
inline void TypedValueProto::set_has_int_list_value() {
  _oneof_case_[0] = kIntListValue;
}
inline void TypedValueProto::clear_int_list_value() {
  if (_internal_has_int_list_value()) {
    if (GetArena() == nullptr) {
      delete value_.int_list_value_;
    }
    clear_has_value();
  }
}
inline ::gtxilib::oopclasses::protos::IntListProto* TypedValueProto::release_int_list_value() {
  // @@protoc_insertion_point(field_release:gtxilib.oopclasses.protos.TypedValueProto.int_list_value)
  if (_internal_has_int_list_value()) {
    clear_has_value();
      ::gtxilib::oopclasses::protos::IntListProto* temp = value_.int_list_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.int_list_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gtxilib::oopclasses::protos::IntListProto& TypedValueProto::_internal_int_list_value() const {
  return _internal_has_int_list_value()
      ? *value_.int_list_value_
      : *reinterpret_cast< ::gtxilib::oopclasses::protos::IntListProto*>(&::gtxilib::oopclasses::protos::_IntListProto_default_instance_);
}
inline const ::gtxilib::oopclasses::protos::IntListProto& TypedValueProto::int_list_value() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.TypedValueProto.int_list_value)
  return _internal_int_list_value();
}
inline ::gtxilib::oopclasses::protos::IntListProto* TypedValueProto::unsafe_arena_release_int_list_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gtxilib.oopclasses.protos.TypedValueProto.int_list_value)
  if (_internal_has_int_list_value()) {
    clear_has_value();
    ::gtxilib::oopclasses::protos::IntListProto* temp = value_.int_list_value_;
    value_.int_list_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TypedValueProto::unsafe_arena_set_allocated_int_list_value(::gtxilib::oopclasses::protos::IntListProto* int_list_value) {
  clear_value();
  if (int_list_value) {
    set_has_int_list_value();
    value_.int_list_value_ = int_list_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gtxilib.oopclasses.protos.TypedValueProto.int_list_value)
}
inline ::gtxilib::oopclasses::protos::IntListProto* TypedValueProto::_internal_mutable_int_list_value() {
  if (!_internal_has_int_list_value()) {
    clear_value();
    set_has_int_list_value();
    value_.int_list_value_ = CreateMaybeMessage< ::gtxilib::oopclasses::protos::IntListProto >(GetArena());
  }
  return value_.int_list_value_;
}
inline ::gtxilib::oopclasses::protos::IntListProto* TypedValueProto::mutable_int_list_value() {
  // @@protoc_insertion_point(field_mutable:gtxilib.oopclasses.protos.TypedValueProto.int_list_value)
  return _internal_mutable_int_list_value();
}

inline bool TypedValueProto::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TypedValueProto::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TypedValueProto::ValueCase TypedValueProto::value_case() const {
  return TypedValueProto::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MetadataProto

// map<string, .gtxilib.oopclasses.protos.TypedValueProto> metadata_map = 1;
inline int MetadataProto::_internal_metadata_map_size() const {
  return metadata_map_.size();
}
inline int MetadataProto::metadata_map_size() const {
  return _internal_metadata_map_size();
}
inline void MetadataProto::clear_metadata_map() {
  metadata_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gtxilib::oopclasses::protos::TypedValueProto >&
MetadataProto::_internal_metadata_map() const {
  return metadata_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gtxilib::oopclasses::protos::TypedValueProto >&
MetadataProto::metadata_map() const {
  // @@protoc_insertion_point(field_map:gtxilib.oopclasses.protos.MetadataProto.metadata_map)
  return _internal_metadata_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gtxilib::oopclasses::protos::TypedValueProto >*
MetadataProto::_internal_mutable_metadata_map() {
  return metadata_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gtxilib::oopclasses::protos::TypedValueProto >*
MetadataProto::mutable_metadata_map() {
  // @@protoc_insertion_point(field_mutable_map:gtxilib.oopclasses.protos.MetadataProto.metadata_map)
  return _internal_mutable_metadata_map();
}

// -------------------------------------------------------------------

// CheckResultProto

// string source_check_class = 1;
inline void CheckResultProto::clear_source_check_class() {
  source_check_class_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CheckResultProto::source_check_class() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.CheckResultProto.source_check_class)
  return _internal_source_check_class();
}
inline void CheckResultProto::set_source_check_class(const std::string& value) {
  _internal_set_source_check_class(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.CheckResultProto.source_check_class)
}
inline std::string* CheckResultProto::mutable_source_check_class() {
  // @@protoc_insertion_point(field_mutable:gtxilib.oopclasses.protos.CheckResultProto.source_check_class)
  return _internal_mutable_source_check_class();
}
inline const std::string& CheckResultProto::_internal_source_check_class() const {
  return source_check_class_.Get();
}
inline void CheckResultProto::_internal_set_source_check_class(const std::string& value) {
  
  source_check_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CheckResultProto::set_source_check_class(std::string&& value) {
  
  source_check_class_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gtxilib.oopclasses.protos.CheckResultProto.source_check_class)
}
inline void CheckResultProto::set_source_check_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_check_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gtxilib.oopclasses.protos.CheckResultProto.source_check_class)
}
inline void CheckResultProto::set_source_check_class(const char* value,
    size_t size) {
  
  source_check_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gtxilib.oopclasses.protos.CheckResultProto.source_check_class)
}
inline std::string* CheckResultProto::_internal_mutable_source_check_class() {
  
  return source_check_class_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CheckResultProto::release_source_check_class() {
  // @@protoc_insertion_point(field_release:gtxilib.oopclasses.protos.CheckResultProto.source_check_class)
  return source_check_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckResultProto::set_allocated_source_check_class(std::string* source_check_class) {
  if (source_check_class != nullptr) {
    
  } else {
    
  }
  source_check_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_check_class,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gtxilib.oopclasses.protos.CheckResultProto.source_check_class)
}

// int32 result_id = 2;
inline void CheckResultProto::clear_result_id() {
  result_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckResultProto::_internal_result_id() const {
  return result_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckResultProto::result_id() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.CheckResultProto.result_id)
  return _internal_result_id();
}
inline void CheckResultProto::_internal_set_result_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_id_ = value;
}
inline void CheckResultProto::set_result_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_id(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.CheckResultProto.result_id)
}

// int64 hierarchy_source_id = 3;
inline bool CheckResultProto::_internal_has_hierarchy_source_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CheckResultProto::has_hierarchy_source_id() const {
  return _internal_has_hierarchy_source_id();
}
inline void CheckResultProto::clear_hierarchy_source_id() {
  hierarchy_source_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CheckResultProto::_internal_hierarchy_source_id() const {
  return hierarchy_source_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CheckResultProto::hierarchy_source_id() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.CheckResultProto.hierarchy_source_id)
  return _internal_hierarchy_source_id();
}
inline void CheckResultProto::_internal_set_hierarchy_source_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  hierarchy_source_id_ = value;
}
inline void CheckResultProto::set_hierarchy_source_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_hierarchy_source_id(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.CheckResultProto.hierarchy_source_id)
}

// .gtxilib.oopclasses.protos.ResultType result_type = 4;
inline void CheckResultProto::clear_result_type() {
  result_type_ = 0;
}
inline ::gtxilib::oopclasses::protos::ResultType CheckResultProto::_internal_result_type() const {
  return static_cast< ::gtxilib::oopclasses::protos::ResultType >(result_type_);
}
inline ::gtxilib::oopclasses::protos::ResultType CheckResultProto::result_type() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.CheckResultProto.result_type)
  return _internal_result_type();
}
inline void CheckResultProto::_internal_set_result_type(::gtxilib::oopclasses::protos::ResultType value) {
  
  result_type_ = value;
}
inline void CheckResultProto::set_result_type(::gtxilib::oopclasses::protos::ResultType value) {
  _internal_set_result_type(value);
  // @@protoc_insertion_point(field_set:gtxilib.oopclasses.protos.CheckResultProto.result_type)
}

// .gtxilib.oopclasses.protos.MetadataProto metadata = 5;
inline bool CheckResultProto::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool CheckResultProto::has_metadata() const {
  return _internal_has_metadata();
}
inline void CheckResultProto::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::gtxilib::oopclasses::protos::MetadataProto& CheckResultProto::_internal_metadata() const {
  const ::gtxilib::oopclasses::protos::MetadataProto* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gtxilib::oopclasses::protos::MetadataProto*>(
      &::gtxilib::oopclasses::protos::_MetadataProto_default_instance_);
}
inline const ::gtxilib::oopclasses::protos::MetadataProto& CheckResultProto::metadata() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.CheckResultProto.metadata)
  return _internal_metadata();
}
inline void CheckResultProto::unsafe_arena_set_allocated_metadata(
    ::gtxilib::oopclasses::protos::MetadataProto* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gtxilib.oopclasses.protos.CheckResultProto.metadata)
}
inline ::gtxilib::oopclasses::protos::MetadataProto* CheckResultProto::release_metadata() {
  
  ::gtxilib::oopclasses::protos::MetadataProto* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gtxilib::oopclasses::protos::MetadataProto* CheckResultProto::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:gtxilib.oopclasses.protos.CheckResultProto.metadata)
  
  ::gtxilib::oopclasses::protos::MetadataProto* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::gtxilib::oopclasses::protos::MetadataProto* CheckResultProto::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::gtxilib::oopclasses::protos::MetadataProto>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::gtxilib::oopclasses::protos::MetadataProto* CheckResultProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:gtxilib.oopclasses.protos.CheckResultProto.metadata)
  return _internal_mutable_metadata();
}
inline void CheckResultProto::set_allocated_metadata(::gtxilib::oopclasses::protos::MetadataProto* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:gtxilib.oopclasses.protos.CheckResultProto.metadata)
}

// -------------------------------------------------------------------

// AccessibilityEvaluation

// .gtxilib.oopclasses.protos.AccessibilityHierarchy hierarchy = 1;
inline bool AccessibilityEvaluation::_internal_has_hierarchy() const {
  return this != internal_default_instance() && hierarchy_ != nullptr;
}
inline bool AccessibilityEvaluation::has_hierarchy() const {
  return _internal_has_hierarchy();
}
inline const ::gtxilib::oopclasses::protos::AccessibilityHierarchy& AccessibilityEvaluation::_internal_hierarchy() const {
  const ::gtxilib::oopclasses::protos::AccessibilityHierarchy* p = hierarchy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gtxilib::oopclasses::protos::AccessibilityHierarchy*>(
      &::gtxilib::oopclasses::protos::_AccessibilityHierarchy_default_instance_);
}
inline const ::gtxilib::oopclasses::protos::AccessibilityHierarchy& AccessibilityEvaluation::hierarchy() const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.AccessibilityEvaluation.hierarchy)
  return _internal_hierarchy();
}
inline void AccessibilityEvaluation::unsafe_arena_set_allocated_hierarchy(
    ::gtxilib::oopclasses::protos::AccessibilityHierarchy* hierarchy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hierarchy_);
  }
  hierarchy_ = hierarchy;
  if (hierarchy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gtxilib.oopclasses.protos.AccessibilityEvaluation.hierarchy)
}
inline ::gtxilib::oopclasses::protos::AccessibilityHierarchy* AccessibilityEvaluation::release_hierarchy() {
  
  ::gtxilib::oopclasses::protos::AccessibilityHierarchy* temp = hierarchy_;
  hierarchy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gtxilib::oopclasses::protos::AccessibilityHierarchy* AccessibilityEvaluation::unsafe_arena_release_hierarchy() {
  // @@protoc_insertion_point(field_release:gtxilib.oopclasses.protos.AccessibilityEvaluation.hierarchy)
  
  ::gtxilib::oopclasses::protos::AccessibilityHierarchy* temp = hierarchy_;
  hierarchy_ = nullptr;
  return temp;
}
inline ::gtxilib::oopclasses::protos::AccessibilityHierarchy* AccessibilityEvaluation::_internal_mutable_hierarchy() {
  
  if (hierarchy_ == nullptr) {
    auto* p = CreateMaybeMessage<::gtxilib::oopclasses::protos::AccessibilityHierarchy>(GetArena());
    hierarchy_ = p;
  }
  return hierarchy_;
}
inline ::gtxilib::oopclasses::protos::AccessibilityHierarchy* AccessibilityEvaluation::mutable_hierarchy() {
  // @@protoc_insertion_point(field_mutable:gtxilib.oopclasses.protos.AccessibilityEvaluation.hierarchy)
  return _internal_mutable_hierarchy();
}
inline void AccessibilityEvaluation::set_allocated_hierarchy(::gtxilib::oopclasses::protos::AccessibilityHierarchy* hierarchy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hierarchy_);
  }
  if (hierarchy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hierarchy)->GetArena();
    if (message_arena != submessage_arena) {
      hierarchy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hierarchy, submessage_arena);
    }
    
  } else {
    
  }
  hierarchy_ = hierarchy;
  // @@protoc_insertion_point(field_set_allocated:gtxilib.oopclasses.protos.AccessibilityEvaluation.hierarchy)
}

// repeated .gtxilib.oopclasses.protos.CheckResultProto results = 2;
inline int AccessibilityEvaluation::_internal_results_size() const {
  return results_.size();
}
inline int AccessibilityEvaluation::results_size() const {
  return _internal_results_size();
}
inline void AccessibilityEvaluation::clear_results() {
  results_.Clear();
}
inline ::gtxilib::oopclasses::protos::CheckResultProto* AccessibilityEvaluation::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:gtxilib.oopclasses.protos.AccessibilityEvaluation.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gtxilib::oopclasses::protos::CheckResultProto >*
AccessibilityEvaluation::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:gtxilib.oopclasses.protos.AccessibilityEvaluation.results)
  return &results_;
}
inline const ::gtxilib::oopclasses::protos::CheckResultProto& AccessibilityEvaluation::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::gtxilib::oopclasses::protos::CheckResultProto& AccessibilityEvaluation::results(int index) const {
  // @@protoc_insertion_point(field_get:gtxilib.oopclasses.protos.AccessibilityEvaluation.results)
  return _internal_results(index);
}
inline ::gtxilib::oopclasses::protos::CheckResultProto* AccessibilityEvaluation::_internal_add_results() {
  return results_.Add();
}
inline ::gtxilib::oopclasses::protos::CheckResultProto* AccessibilityEvaluation::add_results() {
  // @@protoc_insertion_point(field_add:gtxilib.oopclasses.protos.AccessibilityEvaluation.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gtxilib::oopclasses::protos::CheckResultProto >&
AccessibilityEvaluation::results() const {
  // @@protoc_insertion_point(field_list:gtxilib.oopclasses.protos.AccessibilityEvaluation.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace oopclasses
}  // namespace gtxilib

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gtxilib::oopclasses::protos::TypedValueProto_TypeProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gtxilib::oopclasses::protos::TypedValueProto_TypeProto>() {
  return ::gtxilib::oopclasses::protos::TypedValueProto_TypeProto_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_result_2eproto
